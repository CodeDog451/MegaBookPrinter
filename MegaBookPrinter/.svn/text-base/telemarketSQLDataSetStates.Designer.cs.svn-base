//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MegaBookPrinter {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("telemarketSQLDataSetStates")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class telemarketSQLDataSetStates : System.Data.DataSet {
        
        private statesDataTable tablestates;
        
        private LeadCountDataTable tableLeadCount;
        
        private tblSelectDataTable tabletblSelect;
        
        private LookingToTypesDataTable tableLookingToTypes;
        
        private LookingToTypesByDateDataTable tableLookingToTypesByDate;
        
        private LookingToTypesAllStatesDataTable tableLookingToTypesAllStates;
        
        private LookingToTypesByDateAllStatesDataTable tableLookingToTypesByDateAllStates;
        
        private PagedLeadsListAllStatesDataTable tablePagedLeadsListAllStates;
        
        private LookingToTypes1DataTable tableLookingToTypes1;
        
        private PagedLeadsListDataTable tablePagedLeadsList;
        
        private AreacodesDataTable tableAreacodes;
        
        private CitysDataTable tableCitys;
        
        private ZipsDataTable tableZips;
        
        private PagedLeadsListCountDataTable tablePagedLeadsListCount;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public telemarketSQLDataSetStates() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected telemarketSQLDataSetStates(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["states"] != null)) {
                    base.Tables.Add(new statesDataTable(ds.Tables["states"]));
                }
                if ((ds.Tables["LeadCount"] != null)) {
                    base.Tables.Add(new LeadCountDataTable(ds.Tables["LeadCount"]));
                }
                if ((ds.Tables["tblSelect"] != null)) {
                    base.Tables.Add(new tblSelectDataTable(ds.Tables["tblSelect"]));
                }
                if ((ds.Tables["LookingToTypes"] != null)) {
                    base.Tables.Add(new LookingToTypesDataTable(ds.Tables["LookingToTypes"]));
                }
                if ((ds.Tables["LookingToTypesByDate"] != null)) {
                    base.Tables.Add(new LookingToTypesByDateDataTable(ds.Tables["LookingToTypesByDate"]));
                }
                if ((ds.Tables["LookingToTypesAllStates"] != null)) {
                    base.Tables.Add(new LookingToTypesAllStatesDataTable(ds.Tables["LookingToTypesAllStates"]));
                }
                if ((ds.Tables["LookingToTypesByDateAllStates"] != null)) {
                    base.Tables.Add(new LookingToTypesByDateAllStatesDataTable(ds.Tables["LookingToTypesByDateAllStates"]));
                }
                if ((ds.Tables["PagedLeadsListAllStates"] != null)) {
                    base.Tables.Add(new PagedLeadsListAllStatesDataTable(ds.Tables["PagedLeadsListAllStates"]));
                }
                if ((ds.Tables["LookingToTypes1"] != null)) {
                    base.Tables.Add(new LookingToTypes1DataTable(ds.Tables["LookingToTypes1"]));
                }
                if ((ds.Tables["PagedLeadsList"] != null)) {
                    base.Tables.Add(new PagedLeadsListDataTable(ds.Tables["PagedLeadsList"]));
                }
                if ((ds.Tables["Areacodes"] != null)) {
                    base.Tables.Add(new AreacodesDataTable(ds.Tables["Areacodes"]));
                }
                if ((ds.Tables["Citys"] != null)) {
                    base.Tables.Add(new CitysDataTable(ds.Tables["Citys"]));
                }
                if ((ds.Tables["Zips"] != null)) {
                    base.Tables.Add(new ZipsDataTable(ds.Tables["Zips"]));
                }
                if ((ds.Tables["PagedLeadsListCount"] != null)) {
                    base.Tables.Add(new PagedLeadsListCountDataTable(ds.Tables["PagedLeadsListCount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public statesDataTable states {
            get {
                return this.tablestates;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LeadCountDataTable LeadCount {
            get {
                return this.tableLeadCount;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblSelectDataTable tblSelect {
            get {
                return this.tabletblSelect;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookingToTypesDataTable LookingToTypes {
            get {
                return this.tableLookingToTypes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookingToTypesByDateDataTable LookingToTypesByDate {
            get {
                return this.tableLookingToTypesByDate;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookingToTypesAllStatesDataTable LookingToTypesAllStates {
            get {
                return this.tableLookingToTypesAllStates;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookingToTypesByDateAllStatesDataTable LookingToTypesByDateAllStates {
            get {
                return this.tableLookingToTypesByDateAllStates;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PagedLeadsListAllStatesDataTable PagedLeadsListAllStates {
            get {
                return this.tablePagedLeadsListAllStates;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookingToTypes1DataTable LookingToTypes1 {
            get {
                return this.tableLookingToTypes1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PagedLeadsListDataTable PagedLeadsList {
            get {
                return this.tablePagedLeadsList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AreacodesDataTable Areacodes {
            get {
                return this.tableAreacodes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CitysDataTable Citys {
            get {
                return this.tableCitys;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZipsDataTable Zips {
            get {
                return this.tableZips;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PagedLeadsListCountDataTable PagedLeadsListCount {
            get {
                return this.tablePagedLeadsListCount;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            telemarketSQLDataSetStates cln = ((telemarketSQLDataSetStates)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["states"] != null)) {
                    base.Tables.Add(new statesDataTable(ds.Tables["states"]));
                }
                if ((ds.Tables["LeadCount"] != null)) {
                    base.Tables.Add(new LeadCountDataTable(ds.Tables["LeadCount"]));
                }
                if ((ds.Tables["tblSelect"] != null)) {
                    base.Tables.Add(new tblSelectDataTable(ds.Tables["tblSelect"]));
                }
                if ((ds.Tables["LookingToTypes"] != null)) {
                    base.Tables.Add(new LookingToTypesDataTable(ds.Tables["LookingToTypes"]));
                }
                if ((ds.Tables["LookingToTypesByDate"] != null)) {
                    base.Tables.Add(new LookingToTypesByDateDataTable(ds.Tables["LookingToTypesByDate"]));
                }
                if ((ds.Tables["LookingToTypesAllStates"] != null)) {
                    base.Tables.Add(new LookingToTypesAllStatesDataTable(ds.Tables["LookingToTypesAllStates"]));
                }
                if ((ds.Tables["LookingToTypesByDateAllStates"] != null)) {
                    base.Tables.Add(new LookingToTypesByDateAllStatesDataTable(ds.Tables["LookingToTypesByDateAllStates"]));
                }
                if ((ds.Tables["PagedLeadsListAllStates"] != null)) {
                    base.Tables.Add(new PagedLeadsListAllStatesDataTable(ds.Tables["PagedLeadsListAllStates"]));
                }
                if ((ds.Tables["LookingToTypes1"] != null)) {
                    base.Tables.Add(new LookingToTypes1DataTable(ds.Tables["LookingToTypes1"]));
                }
                if ((ds.Tables["PagedLeadsList"] != null)) {
                    base.Tables.Add(new PagedLeadsListDataTable(ds.Tables["PagedLeadsList"]));
                }
                if ((ds.Tables["Areacodes"] != null)) {
                    base.Tables.Add(new AreacodesDataTable(ds.Tables["Areacodes"]));
                }
                if ((ds.Tables["Citys"] != null)) {
                    base.Tables.Add(new CitysDataTable(ds.Tables["Citys"]));
                }
                if ((ds.Tables["Zips"] != null)) {
                    base.Tables.Add(new ZipsDataTable(ds.Tables["Zips"]));
                }
                if ((ds.Tables["PagedLeadsListCount"] != null)) {
                    base.Tables.Add(new PagedLeadsListCountDataTable(ds.Tables["PagedLeadsListCount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablestates = ((statesDataTable)(base.Tables["states"]));
            if ((initTable == true)) {
                if ((this.tablestates != null)) {
                    this.tablestates.InitVars();
                }
            }
            this.tableLeadCount = ((LeadCountDataTable)(base.Tables["LeadCount"]));
            if ((initTable == true)) {
                if ((this.tableLeadCount != null)) {
                    this.tableLeadCount.InitVars();
                }
            }
            this.tabletblSelect = ((tblSelectDataTable)(base.Tables["tblSelect"]));
            if ((initTable == true)) {
                if ((this.tabletblSelect != null)) {
                    this.tabletblSelect.InitVars();
                }
            }
            this.tableLookingToTypes = ((LookingToTypesDataTable)(base.Tables["LookingToTypes"]));
            if ((initTable == true)) {
                if ((this.tableLookingToTypes != null)) {
                    this.tableLookingToTypes.InitVars();
                }
            }
            this.tableLookingToTypesByDate = ((LookingToTypesByDateDataTable)(base.Tables["LookingToTypesByDate"]));
            if ((initTable == true)) {
                if ((this.tableLookingToTypesByDate != null)) {
                    this.tableLookingToTypesByDate.InitVars();
                }
            }
            this.tableLookingToTypesAllStates = ((LookingToTypesAllStatesDataTable)(base.Tables["LookingToTypesAllStates"]));
            if ((initTable == true)) {
                if ((this.tableLookingToTypesAllStates != null)) {
                    this.tableLookingToTypesAllStates.InitVars();
                }
            }
            this.tableLookingToTypesByDateAllStates = ((LookingToTypesByDateAllStatesDataTable)(base.Tables["LookingToTypesByDateAllStates"]));
            if ((initTable == true)) {
                if ((this.tableLookingToTypesByDateAllStates != null)) {
                    this.tableLookingToTypesByDateAllStates.InitVars();
                }
            }
            this.tablePagedLeadsListAllStates = ((PagedLeadsListAllStatesDataTable)(base.Tables["PagedLeadsListAllStates"]));
            if ((initTable == true)) {
                if ((this.tablePagedLeadsListAllStates != null)) {
                    this.tablePagedLeadsListAllStates.InitVars();
                }
            }
            this.tableLookingToTypes1 = ((LookingToTypes1DataTable)(base.Tables["LookingToTypes1"]));
            if ((initTable == true)) {
                if ((this.tableLookingToTypes1 != null)) {
                    this.tableLookingToTypes1.InitVars();
                }
            }
            this.tablePagedLeadsList = ((PagedLeadsListDataTable)(base.Tables["PagedLeadsList"]));
            if ((initTable == true)) {
                if ((this.tablePagedLeadsList != null)) {
                    this.tablePagedLeadsList.InitVars();
                }
            }
            this.tableAreacodes = ((AreacodesDataTable)(base.Tables["Areacodes"]));
            if ((initTable == true)) {
                if ((this.tableAreacodes != null)) {
                    this.tableAreacodes.InitVars();
                }
            }
            this.tableCitys = ((CitysDataTable)(base.Tables["Citys"]));
            if ((initTable == true)) {
                if ((this.tableCitys != null)) {
                    this.tableCitys.InitVars();
                }
            }
            this.tableZips = ((ZipsDataTable)(base.Tables["Zips"]));
            if ((initTable == true)) {
                if ((this.tableZips != null)) {
                    this.tableZips.InitVars();
                }
            }
            this.tablePagedLeadsListCount = ((PagedLeadsListCountDataTable)(base.Tables["PagedLeadsListCount"]));
            if ((initTable == true)) {
                if ((this.tablePagedLeadsListCount != null)) {
                    this.tablePagedLeadsListCount.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "telemarketSQLDataSetStates";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/telemarketSQLDataSetStates.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablestates = new statesDataTable();
            base.Tables.Add(this.tablestates);
            this.tableLeadCount = new LeadCountDataTable();
            base.Tables.Add(this.tableLeadCount);
            this.tabletblSelect = new tblSelectDataTable();
            base.Tables.Add(this.tabletblSelect);
            this.tableLookingToTypes = new LookingToTypesDataTable();
            base.Tables.Add(this.tableLookingToTypes);
            this.tableLookingToTypesByDate = new LookingToTypesByDateDataTable();
            base.Tables.Add(this.tableLookingToTypesByDate);
            this.tableLookingToTypesAllStates = new LookingToTypesAllStatesDataTable();
            base.Tables.Add(this.tableLookingToTypesAllStates);
            this.tableLookingToTypesByDateAllStates = new LookingToTypesByDateAllStatesDataTable();
            base.Tables.Add(this.tableLookingToTypesByDateAllStates);
            this.tablePagedLeadsListAllStates = new PagedLeadsListAllStatesDataTable();
            base.Tables.Add(this.tablePagedLeadsListAllStates);
            this.tableLookingToTypes1 = new LookingToTypes1DataTable();
            base.Tables.Add(this.tableLookingToTypes1);
            this.tablePagedLeadsList = new PagedLeadsListDataTable();
            base.Tables.Add(this.tablePagedLeadsList);
            this.tableAreacodes = new AreacodesDataTable();
            base.Tables.Add(this.tableAreacodes);
            this.tableCitys = new CitysDataTable();
            base.Tables.Add(this.tableCitys);
            this.tableZips = new ZipsDataTable();
            base.Tables.Add(this.tableZips);
            this.tablePagedLeadsListCount = new PagedLeadsListCountDataTable();
            base.Tables.Add(this.tablePagedLeadsListCount);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestates() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLeadCount() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblSelect() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLookingToTypes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLookingToTypesByDate() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLookingToTypesAllStates() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLookingToTypesByDateAllStates() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePagedLeadsListAllStates() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLookingToTypes1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePagedLeadsList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAreacodes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCitys() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeZips() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePagedLeadsListCount() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void statesRowChangeEventHandler(object sender, statesRowChangeEvent e);
        
        public delegate void LeadCountRowChangeEventHandler(object sender, LeadCountRowChangeEvent e);
        
        public delegate void tblSelectRowChangeEventHandler(object sender, tblSelectRowChangeEvent e);
        
        public delegate void LookingToTypesRowChangeEventHandler(object sender, LookingToTypesRowChangeEvent e);
        
        public delegate void LookingToTypesByDateRowChangeEventHandler(object sender, LookingToTypesByDateRowChangeEvent e);
        
        public delegate void LookingToTypesAllStatesRowChangeEventHandler(object sender, LookingToTypesAllStatesRowChangeEvent e);
        
        public delegate void LookingToTypesByDateAllStatesRowChangeEventHandler(object sender, LookingToTypesByDateAllStatesRowChangeEvent e);
        
        public delegate void PagedLeadsListAllStatesRowChangeEventHandler(object sender, PagedLeadsListAllStatesRowChangeEvent e);
        
        public delegate void LookingToTypes1RowChangeEventHandler(object sender, LookingToTypes1RowChangeEvent e);
        
        public delegate void PagedLeadsListRowChangeEventHandler(object sender, PagedLeadsListRowChangeEvent e);
        
        public delegate void AreacodesRowChangeEventHandler(object sender, AreacodesRowChangeEvent e);
        
        public delegate void CitysRowChangeEventHandler(object sender, CitysRowChangeEvent e);
        
        public delegate void ZipsRowChangeEventHandler(object sender, ZipsRowChangeEvent e);
        
        public delegate void PagedLeadsListCountRowChangeEventHandler(object sender, PagedLeadsListCountRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class statesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnstate_abr;
            
            private System.Data.DataColumn columnstate_name;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statesDataTable() {
                this.TableName = "states";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal statesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected statesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn state_abrColumn {
                get {
                    return this.columnstate_abr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn state_nameColumn {
                get {
                    return this.columnstate_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statesRow this[int index] {
                get {
                    return ((statesRow)(this.Rows[index]));
                }
            }
            
            public event statesRowChangeEventHandler statesRowChanging;
            
            public event statesRowChangeEventHandler statesRowChanged;
            
            public event statesRowChangeEventHandler statesRowDeleting;
            
            public event statesRowChangeEventHandler statesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstatesRow(statesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statesRow AddstatesRow(string state_abr, string state_name) {
                statesRow rowstatesRow = ((statesRow)(this.NewRow()));
                rowstatesRow.ItemArray = new object[] {
                        state_abr,
                        state_name};
                this.Rows.Add(rowstatesRow);
                return rowstatesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                statesDataTable cln = ((statesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new statesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstate_abr = base.Columns["state_abr"];
                this.columnstate_name = base.Columns["state_name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstate_abr = new System.Data.DataColumn("state_abr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate_abr);
                this.columnstate_name = new System.Data.DataColumn("state_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate_name);
                this.columnstate_abr.MaxLength = 10;
                this.columnstate_name.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statesRow NewstatesRow() {
                return ((statesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new statesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(statesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.statesRowChanged != null)) {
                    this.statesRowChanged(this, new statesRowChangeEvent(((statesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.statesRowChanging != null)) {
                    this.statesRowChanging(this, new statesRowChangeEvent(((statesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.statesRowDeleted != null)) {
                    this.statesRowDeleted(this, new statesRowChangeEvent(((statesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.statesRowDeleting != null)) {
                    this.statesRowDeleting(this, new statesRowChangeEvent(((statesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestatesRow(statesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "statesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LeadCountDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTotal;
            
            private System.Data.DataColumn columnlead_State;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeadCountDataTable() {
                this.TableName = "LeadCount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LeadCountDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LeadCountDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lead_StateColumn {
                get {
                    return this.columnlead_State;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeadCountRow this[int index] {
                get {
                    return ((LeadCountRow)(this.Rows[index]));
                }
            }
            
            public event LeadCountRowChangeEventHandler LeadCountRowChanging;
            
            public event LeadCountRowChangeEventHandler LeadCountRowChanged;
            
            public event LeadCountRowChangeEventHandler LeadCountRowDeleting;
            
            public event LeadCountRowChangeEventHandler LeadCountRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLeadCountRow(LeadCountRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeadCountRow AddLeadCountRow(int Total, string lead_State) {
                LeadCountRow rowLeadCountRow = ((LeadCountRow)(this.NewRow()));
                rowLeadCountRow.ItemArray = new object[] {
                        Total,
                        lead_State};
                this.Rows.Add(rowLeadCountRow);
                return rowLeadCountRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LeadCountDataTable cln = ((LeadCountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LeadCountDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTotal = base.Columns["Total"];
                this.columnlead_State = base.Columns["lead_State"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTotal = new System.Data.DataColumn("Total", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnlead_State = new System.Data.DataColumn("lead_State", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlead_State);
                this.columnTotal.ReadOnly = true;
                this.columnlead_State.MaxLength = 255;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeadCountRow NewLeadCountRow() {
                return ((LeadCountRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LeadCountRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LeadCountRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LeadCountRowChanged != null)) {
                    this.LeadCountRowChanged(this, new LeadCountRowChangeEvent(((LeadCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LeadCountRowChanging != null)) {
                    this.LeadCountRowChanging(this, new LeadCountRowChangeEvent(((LeadCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LeadCountRowDeleted != null)) {
                    this.LeadCountRowDeleted(this, new LeadCountRowChangeEvent(((LeadCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LeadCountRowDeleting != null)) {
                    this.LeadCountRowDeleting(this, new LeadCountRowChangeEvent(((LeadCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLeadCountRow(LeadCountRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LeadCountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblSelectDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columniSelect;
            
            private System.Data.DataColumn columnsSelect;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSelectDataTable() {
                this.TableName = "tblSelect";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSelectDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblSelectDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn iSelectColumn {
                get {
                    return this.columniSelect;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sSelectColumn {
                get {
                    return this.columnsSelect;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSelectRow this[int index] {
                get {
                    return ((tblSelectRow)(this.Rows[index]));
                }
            }
            
            public event tblSelectRowChangeEventHandler tblSelectRowChanging;
            
            public event tblSelectRowChangeEventHandler tblSelectRowChanged;
            
            public event tblSelectRowChangeEventHandler tblSelectRowDeleting;
            
            public event tblSelectRowChangeEventHandler tblSelectRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblSelectRow(tblSelectRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSelectRow AddtblSelectRow(int iSelect, string sSelect) {
                tblSelectRow rowtblSelectRow = ((tblSelectRow)(this.NewRow()));
                rowtblSelectRow.ItemArray = new object[] {
                        iSelect,
                        sSelect};
                this.Rows.Add(rowtblSelectRow);
                return rowtblSelectRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                tblSelectDataTable cln = ((tblSelectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new tblSelectDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columniSelect = base.Columns["iSelect"];
                this.columnsSelect = base.Columns["sSelect"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columniSelect = new System.Data.DataColumn("iSelect", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columniSelect);
                this.columnsSelect = new System.Data.DataColumn("sSelect", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsSelect);
                this.columniSelect.AllowDBNull = false;
                this.columnsSelect.AllowDBNull = false;
                this.columnsSelect.MaxLength = 15;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSelectRow NewtblSelectRow() {
                return ((tblSelectRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new tblSelectRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(tblSelectRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblSelectRowChanged != null)) {
                    this.tblSelectRowChanged(this, new tblSelectRowChangeEvent(((tblSelectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblSelectRowChanging != null)) {
                    this.tblSelectRowChanging(this, new tblSelectRowChangeEvent(((tblSelectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblSelectRowDeleted != null)) {
                    this.tblSelectRowDeleted(this, new tblSelectRowChangeEvent(((tblSelectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblSelectRowDeleting != null)) {
                    this.tblSelectRowDeleting(this, new tblSelectRowChangeEvent(((tblSelectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblSelectRow(tblSelectRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblSelectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookingToTypesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilters;
            
            private System.Data.DataColumn columnLead_Count;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesDataTable() {
                this.TableName = "LookingToTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LookingToTypesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FiltersColumn {
                get {
                    return this.columnFilters;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lead_CountColumn {
                get {
                    return this.columnLead_Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesRow this[int index] {
                get {
                    return ((LookingToTypesRow)(this.Rows[index]));
                }
            }
            
            public event LookingToTypesRowChangeEventHandler LookingToTypesRowChanging;
            
            public event LookingToTypesRowChangeEventHandler LookingToTypesRowChanged;
            
            public event LookingToTypesRowChangeEventHandler LookingToTypesRowDeleting;
            
            public event LookingToTypesRowChangeEventHandler LookingToTypesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLookingToTypesRow(LookingToTypesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesRow AddLookingToTypesRow(string Filters, int Lead_Count) {
                LookingToTypesRow rowLookingToTypesRow = ((LookingToTypesRow)(this.NewRow()));
                rowLookingToTypesRow.ItemArray = new object[] {
                        Filters,
                        Lead_Count};
                this.Rows.Add(rowLookingToTypesRow);
                return rowLookingToTypesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LookingToTypesDataTable cln = ((LookingToTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LookingToTypesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilters = base.Columns["Filters"];
                this.columnLead_Count = base.Columns["Lead Count"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilters = new System.Data.DataColumn("Filters", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilters);
                this.columnLead_Count = new System.Data.DataColumn("Lead Count", typeof(int), null, System.Data.MappingType.Element);
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Lead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Lead_CountColumn");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_UserColumnName", "Lead Count");
                base.Columns.Add(this.columnLead_Count);
                this.columnFilters.ReadOnly = true;
                this.columnFilters.MaxLength = 4;
                this.columnLead_Count.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesRow NewLookingToTypesRow() {
                return ((LookingToTypesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LookingToTypesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LookingToTypesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LookingToTypesRowChanged != null)) {
                    this.LookingToTypesRowChanged(this, new LookingToTypesRowChangeEvent(((LookingToTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LookingToTypesRowChanging != null)) {
                    this.LookingToTypesRowChanging(this, new LookingToTypesRowChangeEvent(((LookingToTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LookingToTypesRowDeleted != null)) {
                    this.LookingToTypesRowDeleted(this, new LookingToTypesRowChangeEvent(((LookingToTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LookingToTypesRowDeleting != null)) {
                    this.LookingToTypesRowDeleting(this, new LookingToTypesRowChangeEvent(((LookingToTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLookingToTypesRow(LookingToTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookingToTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookingToTypesByDateDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilters;
            
            private System.Data.DataColumn columnLead_Count;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateDataTable() {
                this.TableName = "LookingToTypesByDate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypesByDateDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LookingToTypesByDateDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FiltersColumn {
                get {
                    return this.columnFilters;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lead_CountColumn {
                get {
                    return this.columnLead_Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateRow this[int index] {
                get {
                    return ((LookingToTypesByDateRow)(this.Rows[index]));
                }
            }
            
            public event LookingToTypesByDateRowChangeEventHandler LookingToTypesByDateRowChanging;
            
            public event LookingToTypesByDateRowChangeEventHandler LookingToTypesByDateRowChanged;
            
            public event LookingToTypesByDateRowChangeEventHandler LookingToTypesByDateRowDeleting;
            
            public event LookingToTypesByDateRowChangeEventHandler LookingToTypesByDateRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLookingToTypesByDateRow(LookingToTypesByDateRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateRow AddLookingToTypesByDateRow(string Filters, int Lead_Count) {
                LookingToTypesByDateRow rowLookingToTypesByDateRow = ((LookingToTypesByDateRow)(this.NewRow()));
                rowLookingToTypesByDateRow.ItemArray = new object[] {
                        Filters,
                        Lead_Count};
                this.Rows.Add(rowLookingToTypesByDateRow);
                return rowLookingToTypesByDateRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LookingToTypesByDateDataTable cln = ((LookingToTypesByDateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LookingToTypesByDateDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilters = base.Columns["Filters"];
                this.columnLead_Count = base.Columns["Lead Count"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilters = new System.Data.DataColumn("Filters", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilters);
                this.columnLead_Count = new System.Data.DataColumn("Lead Count", typeof(int), null, System.Data.MappingType.Element);
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Lead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Lead_CountColumn");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_UserColumnName", "Lead Count");
                base.Columns.Add(this.columnLead_Count);
                this.columnFilters.ReadOnly = true;
                this.columnFilters.MaxLength = 4;
                this.columnLead_Count.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateRow NewLookingToTypesByDateRow() {
                return ((LookingToTypesByDateRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LookingToTypesByDateRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LookingToTypesByDateRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LookingToTypesByDateRowChanged != null)) {
                    this.LookingToTypesByDateRowChanged(this, new LookingToTypesByDateRowChangeEvent(((LookingToTypesByDateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LookingToTypesByDateRowChanging != null)) {
                    this.LookingToTypesByDateRowChanging(this, new LookingToTypesByDateRowChangeEvent(((LookingToTypesByDateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LookingToTypesByDateRowDeleted != null)) {
                    this.LookingToTypesByDateRowDeleted(this, new LookingToTypesByDateRowChangeEvent(((LookingToTypesByDateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LookingToTypesByDateRowDeleting != null)) {
                    this.LookingToTypesByDateRowDeleting(this, new LookingToTypesByDateRowChangeEvent(((LookingToTypesByDateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLookingToTypesByDateRow(LookingToTypesByDateRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookingToTypesByDateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookingToTypesAllStatesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilters;
            
            private System.Data.DataColumn columnLead_Count;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesAllStatesDataTable() {
                this.TableName = "LookingToTypesAllStates";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypesAllStatesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LookingToTypesAllStatesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FiltersColumn {
                get {
                    return this.columnFilters;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lead_CountColumn {
                get {
                    return this.columnLead_Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesAllStatesRow this[int index] {
                get {
                    return ((LookingToTypesAllStatesRow)(this.Rows[index]));
                }
            }
            
            public event LookingToTypesAllStatesRowChangeEventHandler LookingToTypesAllStatesRowChanging;
            
            public event LookingToTypesAllStatesRowChangeEventHandler LookingToTypesAllStatesRowChanged;
            
            public event LookingToTypesAllStatesRowChangeEventHandler LookingToTypesAllStatesRowDeleting;
            
            public event LookingToTypesAllStatesRowChangeEventHandler LookingToTypesAllStatesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLookingToTypesAllStatesRow(LookingToTypesAllStatesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesAllStatesRow AddLookingToTypesAllStatesRow(string Filters, int Lead_Count) {
                LookingToTypesAllStatesRow rowLookingToTypesAllStatesRow = ((LookingToTypesAllStatesRow)(this.NewRow()));
                rowLookingToTypesAllStatesRow.ItemArray = new object[] {
                        Filters,
                        Lead_Count};
                this.Rows.Add(rowLookingToTypesAllStatesRow);
                return rowLookingToTypesAllStatesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LookingToTypesAllStatesDataTable cln = ((LookingToTypesAllStatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LookingToTypesAllStatesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilters = base.Columns["Filters"];
                this.columnLead_Count = base.Columns["Lead Count"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilters = new System.Data.DataColumn("Filters", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilters);
                this.columnLead_Count = new System.Data.DataColumn("Lead Count", typeof(int), null, System.Data.MappingType.Element);
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Lead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Lead_CountColumn");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_UserColumnName", "Lead Count");
                base.Columns.Add(this.columnLead_Count);
                this.columnFilters.ReadOnly = true;
                this.columnFilters.MaxLength = 4;
                this.columnLead_Count.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesAllStatesRow NewLookingToTypesAllStatesRow() {
                return ((LookingToTypesAllStatesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LookingToTypesAllStatesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LookingToTypesAllStatesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LookingToTypesAllStatesRowChanged != null)) {
                    this.LookingToTypesAllStatesRowChanged(this, new LookingToTypesAllStatesRowChangeEvent(((LookingToTypesAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LookingToTypesAllStatesRowChanging != null)) {
                    this.LookingToTypesAllStatesRowChanging(this, new LookingToTypesAllStatesRowChangeEvent(((LookingToTypesAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LookingToTypesAllStatesRowDeleted != null)) {
                    this.LookingToTypesAllStatesRowDeleted(this, new LookingToTypesAllStatesRowChangeEvent(((LookingToTypesAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LookingToTypesAllStatesRowDeleting != null)) {
                    this.LookingToTypesAllStatesRowDeleting(this, new LookingToTypesAllStatesRowChangeEvent(((LookingToTypesAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLookingToTypesAllStatesRow(LookingToTypesAllStatesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookingToTypesAllStatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookingToTypesByDateAllStatesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilters;
            
            private System.Data.DataColumn columnLead_Count;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateAllStatesDataTable() {
                this.TableName = "LookingToTypesByDateAllStates";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypesByDateAllStatesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LookingToTypesByDateAllStatesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FiltersColumn {
                get {
                    return this.columnFilters;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lead_CountColumn {
                get {
                    return this.columnLead_Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateAllStatesRow this[int index] {
                get {
                    return ((LookingToTypesByDateAllStatesRow)(this.Rows[index]));
                }
            }
            
            public event LookingToTypesByDateAllStatesRowChangeEventHandler LookingToTypesByDateAllStatesRowChanging;
            
            public event LookingToTypesByDateAllStatesRowChangeEventHandler LookingToTypesByDateAllStatesRowChanged;
            
            public event LookingToTypesByDateAllStatesRowChangeEventHandler LookingToTypesByDateAllStatesRowDeleting;
            
            public event LookingToTypesByDateAllStatesRowChangeEventHandler LookingToTypesByDateAllStatesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLookingToTypesByDateAllStatesRow(LookingToTypesByDateAllStatesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateAllStatesRow AddLookingToTypesByDateAllStatesRow(string Filters, int Lead_Count) {
                LookingToTypesByDateAllStatesRow rowLookingToTypesByDateAllStatesRow = ((LookingToTypesByDateAllStatesRow)(this.NewRow()));
                rowLookingToTypesByDateAllStatesRow.ItemArray = new object[] {
                        Filters,
                        Lead_Count};
                this.Rows.Add(rowLookingToTypesByDateAllStatesRow);
                return rowLookingToTypesByDateAllStatesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LookingToTypesByDateAllStatesDataTable cln = ((LookingToTypesByDateAllStatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LookingToTypesByDateAllStatesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilters = base.Columns["Filters"];
                this.columnLead_Count = base.Columns["Lead Count"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilters = new System.Data.DataColumn("Filters", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilters);
                this.columnLead_Count = new System.Data.DataColumn("Lead Count", typeof(int), null, System.Data.MappingType.Element);
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Lead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Lead_CountColumn");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_UserColumnName", "Lead Count");
                base.Columns.Add(this.columnLead_Count);
                this.columnFilters.ReadOnly = true;
                this.columnFilters.MaxLength = 4;
                this.columnLead_Count.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateAllStatesRow NewLookingToTypesByDateAllStatesRow() {
                return ((LookingToTypesByDateAllStatesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LookingToTypesByDateAllStatesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LookingToTypesByDateAllStatesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LookingToTypesByDateAllStatesRowChanged != null)) {
                    this.LookingToTypesByDateAllStatesRowChanged(this, new LookingToTypesByDateAllStatesRowChangeEvent(((LookingToTypesByDateAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LookingToTypesByDateAllStatesRowChanging != null)) {
                    this.LookingToTypesByDateAllStatesRowChanging(this, new LookingToTypesByDateAllStatesRowChangeEvent(((LookingToTypesByDateAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LookingToTypesByDateAllStatesRowDeleted != null)) {
                    this.LookingToTypesByDateAllStatesRowDeleted(this, new LookingToTypesByDateAllStatesRowChangeEvent(((LookingToTypesByDateAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LookingToTypesByDateAllStatesRowDeleting != null)) {
                    this.LookingToTypesByDateAllStatesRowDeleting(this, new LookingToTypesByDateAllStatesRowChangeEvent(((LookingToTypesByDateAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLookingToTypesByDateAllStatesRow(LookingToTypesByDateAllStatesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookingToTypesByDateAllStatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PagedLeadsListAllStatesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFirst_Cre_Date;
            
            private System.Data.DataColumn columnFirst_Name;
            
            private System.Data.DataColumn columnLast_Name;
            
            private System.Data.DataColumn columnCo_App;
            
            private System.Data.DataColumn columnCity;
            
            private System.Data.DataColumn columnState;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnZip;
            
            private System.Data.DataColumn columnWork_Phone;
            
            private System.Data.DataColumn columnHome_Phone;
            
            private System.Data.DataColumn columnHouse_Type;
            
            private System.Data.DataColumn columnDesired_Loan;
            
            private System.Data.DataColumn columnRate;
            
            private System.Data.DataColumn columnCredit;
            
            private System.Data.DataColumn columnWant_to;
            
            private System.Data.DataColumn columnCall_1;
            
            private System.Data.DataColumn columnCall_2;
            
            private System.Data.DataColumn columnCall_3;
            
            private System.Data.DataColumn columnCall_4;
            
            private System.Data.DataColumn columnCall_5;
            
            private System.Data.DataColumn columnRowNum;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListAllStatesDataTable() {
                this.TableName = "PagedLeadsListAllStates";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PagedLeadsListAllStatesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PagedLeadsListAllStatesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn First_Cre_DateColumn {
                get {
                    return this.columnFirst_Cre_Date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn First_NameColumn {
                get {
                    return this.columnFirst_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_NameColumn {
                get {
                    return this.columnLast_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Co_AppColumn {
                get {
                    return this.columnCo_App;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Work_PhoneColumn {
                get {
                    return this.columnWork_Phone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Home_PhoneColumn {
                get {
                    return this.columnHome_Phone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn House_TypeColumn {
                get {
                    return this.columnHouse_Type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Desired_LoanColumn {
                get {
                    return this.columnDesired_Loan;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreditColumn {
                get {
                    return this.columnCredit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Want_toColumn {
                get {
                    return this.columnWant_to;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_1Column {
                get {
                    return this.columnCall_1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_2Column {
                get {
                    return this.columnCall_2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_3Column {
                get {
                    return this.columnCall_3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_4Column {
                get {
                    return this.columnCall_4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_5Column {
                get {
                    return this.columnCall_5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowNumColumn {
                get {
                    return this.columnRowNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListAllStatesRow this[int index] {
                get {
                    return ((PagedLeadsListAllStatesRow)(this.Rows[index]));
                }
            }
            
            public event PagedLeadsListAllStatesRowChangeEventHandler PagedLeadsListAllStatesRowChanging;
            
            public event PagedLeadsListAllStatesRowChangeEventHandler PagedLeadsListAllStatesRowChanged;
            
            public event PagedLeadsListAllStatesRowChangeEventHandler PagedLeadsListAllStatesRowDeleting;
            
            public event PagedLeadsListAllStatesRowChangeEventHandler PagedLeadsListAllStatesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPagedLeadsListAllStatesRow(PagedLeadsListAllStatesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListAllStatesRow AddPagedLeadsListAllStatesRow(
                        System.DateTime First_Cre_Date, 
                        string First_Name, 
                        string Last_Name, 
                        string Co_App, 
                        string City, 
                        string State, 
                        string Address, 
                        string Zip, 
                        string Work_Phone, 
                        string Home_Phone, 
                        string House_Type, 
                        decimal Desired_Loan, 
                        string Rate, 
                        string Credit, 
                        string Want_to, 
                        string Call_1, 
                        string Call_2, 
                        string Call_3, 
                        string Call_4, 
                        string Call_5, 
                        long RowNum) {
                PagedLeadsListAllStatesRow rowPagedLeadsListAllStatesRow = ((PagedLeadsListAllStatesRow)(this.NewRow()));
                rowPagedLeadsListAllStatesRow.ItemArray = new object[] {
                        First_Cre_Date,
                        First_Name,
                        Last_Name,
                        Co_App,
                        City,
                        State,
                        Address,
                        Zip,
                        Work_Phone,
                        Home_Phone,
                        House_Type,
                        Desired_Loan,
                        Rate,
                        Credit,
                        Want_to,
                        Call_1,
                        Call_2,
                        Call_3,
                        Call_4,
                        Call_5,
                        RowNum};
                this.Rows.Add(rowPagedLeadsListAllStatesRow);
                return rowPagedLeadsListAllStatesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PagedLeadsListAllStatesDataTable cln = ((PagedLeadsListAllStatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PagedLeadsListAllStatesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFirst_Cre_Date = base.Columns["First_Cre_Date"];
                this.columnFirst_Name = base.Columns["First Name"];
                this.columnLast_Name = base.Columns["Last Name"];
                this.columnCo_App = base.Columns["Co App"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnAddress = base.Columns["Address"];
                this.columnZip = base.Columns["Zip"];
                this.columnWork_Phone = base.Columns["Work Phone"];
                this.columnHome_Phone = base.Columns["Home Phone"];
                this.columnHouse_Type = base.Columns["House Type"];
                this.columnDesired_Loan = base.Columns["Desired Loan"];
                this.columnRate = base.Columns["Rate"];
                this.columnCredit = base.Columns["Credit"];
                this.columnWant_to = base.Columns["Want to"];
                this.columnCall_1 = base.Columns["Call 1"];
                this.columnCall_2 = base.Columns["Call 2"];
                this.columnCall_3 = base.Columns["Call 3"];
                this.columnCall_4 = base.Columns["Call 4"];
                this.columnCall_5 = base.Columns["Call 5"];
                this.columnRowNum = base.Columns["RowNum"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFirst_Cre_Date = new System.Data.DataColumn("First_Cre_Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirst_Cre_Date);
                this.columnFirst_Name = new System.Data.DataColumn("First Name", typeof(string), null, System.Data.MappingType.Element);
                this.columnFirst_Name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "First_Name");
                this.columnFirst_Name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "First_NameColumn");
                this.columnFirst_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFirst_Name");
                this.columnFirst_Name.ExtendedProperties.Add("Generator_UserColumnName", "First Name");
                base.Columns.Add(this.columnFirst_Name);
                this.columnLast_Name = new System.Data.DataColumn("Last Name", typeof(string), null, System.Data.MappingType.Element);
                this.columnLast_Name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Name");
                this.columnLast_Name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_NameColumn");
                this.columnLast_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Name");
                this.columnLast_Name.ExtendedProperties.Add("Generator_UserColumnName", "Last Name");
                base.Columns.Add(this.columnLast_Name);
                this.columnCo_App = new System.Data.DataColumn("Co App", typeof(string), null, System.Data.MappingType.Element);
                this.columnCo_App.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Co_App");
                this.columnCo_App.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Co_AppColumn");
                this.columnCo_App.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCo_App");
                this.columnCo_App.ExtendedProperties.Add("Generator_UserColumnName", "Co App");
                base.Columns.Add(this.columnCo_App);
                this.columnCity = new System.Data.DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new System.Data.DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnZip = new System.Data.DataColumn("Zip", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnWork_Phone = new System.Data.DataColumn("Work Phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnWork_Phone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Work_Phone");
                this.columnWork_Phone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Work_PhoneColumn");
                this.columnWork_Phone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnWork_Phone");
                this.columnWork_Phone.ExtendedProperties.Add("Generator_UserColumnName", "Work Phone");
                base.Columns.Add(this.columnWork_Phone);
                this.columnHome_Phone = new System.Data.DataColumn("Home Phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnHome_Phone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Home_Phone");
                this.columnHome_Phone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Home_PhoneColumn");
                this.columnHome_Phone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHome_Phone");
                this.columnHome_Phone.ExtendedProperties.Add("Generator_UserColumnName", "Home Phone");
                base.Columns.Add(this.columnHome_Phone);
                this.columnHouse_Type = new System.Data.DataColumn("House Type", typeof(string), null, System.Data.MappingType.Element);
                this.columnHouse_Type.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "House_Type");
                this.columnHouse_Type.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "House_TypeColumn");
                this.columnHouse_Type.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHouse_Type");
                this.columnHouse_Type.ExtendedProperties.Add("Generator_UserColumnName", "House Type");
                base.Columns.Add(this.columnHouse_Type);
                this.columnDesired_Loan = new System.Data.DataColumn("Desired Loan", typeof(decimal), null, System.Data.MappingType.Element);
                this.columnDesired_Loan.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Desired_Loan");
                this.columnDesired_Loan.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Desired_LoanColumn");
                this.columnDesired_Loan.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDesired_Loan");
                this.columnDesired_Loan.ExtendedProperties.Add("Generator_UserColumnName", "Desired Loan");
                base.Columns.Add(this.columnDesired_Loan);
                this.columnRate = new System.Data.DataColumn("Rate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnCredit = new System.Data.DataColumn("Credit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCredit);
                this.columnWant_to = new System.Data.DataColumn("Want to", typeof(string), null, System.Data.MappingType.Element);
                this.columnWant_to.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Want_to");
                this.columnWant_to.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Want_toColumn");
                this.columnWant_to.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnWant_to");
                this.columnWant_to.ExtendedProperties.Add("Generator_UserColumnName", "Want to");
                base.Columns.Add(this.columnWant_to);
                this.columnCall_1 = new System.Data.DataColumn("Call 1", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_1.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_1");
                this.columnCall_1.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_1Column");
                this.columnCall_1.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_1");
                this.columnCall_1.ExtendedProperties.Add("Generator_UserColumnName", "Call 1");
                base.Columns.Add(this.columnCall_1);
                this.columnCall_2 = new System.Data.DataColumn("Call 2", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_2.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_2");
                this.columnCall_2.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_2Column");
                this.columnCall_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_2");
                this.columnCall_2.ExtendedProperties.Add("Generator_UserColumnName", "Call 2");
                base.Columns.Add(this.columnCall_2);
                this.columnCall_3 = new System.Data.DataColumn("Call 3", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_3.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_3");
                this.columnCall_3.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_3Column");
                this.columnCall_3.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_3");
                this.columnCall_3.ExtendedProperties.Add("Generator_UserColumnName", "Call 3");
                base.Columns.Add(this.columnCall_3);
                this.columnCall_4 = new System.Data.DataColumn("Call 4", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_4.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_4");
                this.columnCall_4.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_4Column");
                this.columnCall_4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_4");
                this.columnCall_4.ExtendedProperties.Add("Generator_UserColumnName", "Call 4");
                base.Columns.Add(this.columnCall_4);
                this.columnCall_5 = new System.Data.DataColumn("Call 5", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_5.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_5");
                this.columnCall_5.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_5Column");
                this.columnCall_5.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_5");
                this.columnCall_5.ExtendedProperties.Add("Generator_UserColumnName", "Call 5");
                base.Columns.Add(this.columnCall_5);
                this.columnRowNum = new System.Data.DataColumn("RowNum", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNum);
                this.columnFirst_Name.ReadOnly = true;
                this.columnFirst_Name.MaxLength = 15;
                this.columnLast_Name.ReadOnly = true;
                this.columnLast_Name.MaxLength = 15;
                this.columnCo_App.ReadOnly = true;
                this.columnCo_App.MaxLength = 16;
                this.columnCity.ReadOnly = true;
                this.columnCity.MaxLength = 15;
                this.columnState.MaxLength = 255;
                this.columnAddress.ReadOnly = true;
                this.columnAddress.MaxLength = 25;
                this.columnZip.ReadOnly = true;
                this.columnZip.MaxLength = 5;
                this.columnWork_Phone.MaxLength = 255;
                this.columnHome_Phone.MaxLength = 255;
                this.columnHouse_Type.ReadOnly = true;
                this.columnHouse_Type.MaxLength = 13;
                this.columnDesired_Loan.ReadOnly = true;
                this.columnRate.ReadOnly = true;
                this.columnRate.MaxLength = 255;
                this.columnCredit.ReadOnly = true;
                this.columnCredit.MaxLength = 9;
                this.columnWant_to.ReadOnly = true;
                this.columnWant_to.MaxLength = 15;
                this.columnCall_1.ReadOnly = true;
                this.columnCall_1.MaxLength = 2;
                this.columnCall_2.ReadOnly = true;
                this.columnCall_2.MaxLength = 2;
                this.columnCall_3.ReadOnly = true;
                this.columnCall_3.MaxLength = 2;
                this.columnCall_4.ReadOnly = true;
                this.columnCall_4.MaxLength = 2;
                this.columnCall_5.ReadOnly = true;
                this.columnCall_5.MaxLength = 2;
                this.columnRowNum.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListAllStatesRow NewPagedLeadsListAllStatesRow() {
                return ((PagedLeadsListAllStatesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PagedLeadsListAllStatesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PagedLeadsListAllStatesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PagedLeadsListAllStatesRowChanged != null)) {
                    this.PagedLeadsListAllStatesRowChanged(this, new PagedLeadsListAllStatesRowChangeEvent(((PagedLeadsListAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PagedLeadsListAllStatesRowChanging != null)) {
                    this.PagedLeadsListAllStatesRowChanging(this, new PagedLeadsListAllStatesRowChangeEvent(((PagedLeadsListAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PagedLeadsListAllStatesRowDeleted != null)) {
                    this.PagedLeadsListAllStatesRowDeleted(this, new PagedLeadsListAllStatesRowChangeEvent(((PagedLeadsListAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PagedLeadsListAllStatesRowDeleting != null)) {
                    this.PagedLeadsListAllStatesRowDeleting(this, new PagedLeadsListAllStatesRowChangeEvent(((PagedLeadsListAllStatesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePagedLeadsListAllStatesRow(PagedLeadsListAllStatesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PagedLeadsListAllStatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookingToTypes1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilters;
            
            private System.Data.DataColumn columnLead_Count;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypes1DataTable() {
                this.TableName = "LookingToTypes1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypes1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LookingToTypes1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FiltersColumn {
                get {
                    return this.columnFilters;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lead_CountColumn {
                get {
                    return this.columnLead_Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypes1Row this[int index] {
                get {
                    return ((LookingToTypes1Row)(this.Rows[index]));
                }
            }
            
            public event LookingToTypes1RowChangeEventHandler LookingToTypes1RowChanging;
            
            public event LookingToTypes1RowChangeEventHandler LookingToTypes1RowChanged;
            
            public event LookingToTypes1RowChangeEventHandler LookingToTypes1RowDeleting;
            
            public event LookingToTypes1RowChangeEventHandler LookingToTypes1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLookingToTypes1Row(LookingToTypes1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypes1Row AddLookingToTypes1Row(string Filters, int Lead_Count) {
                LookingToTypes1Row rowLookingToTypes1Row = ((LookingToTypes1Row)(this.NewRow()));
                rowLookingToTypes1Row.ItemArray = new object[] {
                        Filters,
                        Lead_Count};
                this.Rows.Add(rowLookingToTypes1Row);
                return rowLookingToTypes1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LookingToTypes1DataTable cln = ((LookingToTypes1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LookingToTypes1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilters = base.Columns["Filters"];
                this.columnLead_Count = base.Columns["Lead Count"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilters = new System.Data.DataColumn("Filters", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilters);
                this.columnLead_Count = new System.Data.DataColumn("Lead Count", typeof(int), null, System.Data.MappingType.Element);
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Lead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Lead_CountColumn");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_UserColumnName", "Lead Count");
                base.Columns.Add(this.columnLead_Count);
                this.columnFilters.ReadOnly = true;
                this.columnFilters.MaxLength = 4;
                this.columnLead_Count.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypes1Row NewLookingToTypes1Row() {
                return ((LookingToTypes1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LookingToTypes1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LookingToTypes1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LookingToTypes1RowChanged != null)) {
                    this.LookingToTypes1RowChanged(this, new LookingToTypes1RowChangeEvent(((LookingToTypes1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LookingToTypes1RowChanging != null)) {
                    this.LookingToTypes1RowChanging(this, new LookingToTypes1RowChangeEvent(((LookingToTypes1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LookingToTypes1RowDeleted != null)) {
                    this.LookingToTypes1RowDeleted(this, new LookingToTypes1RowChangeEvent(((LookingToTypes1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LookingToTypes1RowDeleting != null)) {
                    this.LookingToTypes1RowDeleting(this, new LookingToTypes1RowChangeEvent(((LookingToTypes1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLookingToTypes1Row(LookingToTypes1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookingToTypes1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PagedLeadsListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFirst_Cre_Date;
            
            private System.Data.DataColumn columnFirst_Name;
            
            private System.Data.DataColumn columnLast_Name;
            
            private System.Data.DataColumn columnCo_App;
            
            private System.Data.DataColumn columnCity;
            
            private System.Data.DataColumn columnState;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnZip;
            
            private System.Data.DataColumn columnWork_Phone;
            
            private System.Data.DataColumn columnHome_Phone;
            
            private System.Data.DataColumn columnHouse_Type;
            
            private System.Data.DataColumn columnDesired_Loan;
            
            private System.Data.DataColumn columnRate;
            
            private System.Data.DataColumn columnCredit;
            
            private System.Data.DataColumn columnWant_to;
            
            private System.Data.DataColumn columnCall_1;
            
            private System.Data.DataColumn columnCall_2;
            
            private System.Data.DataColumn columnCall_3;
            
            private System.Data.DataColumn columnCall_4;
            
            private System.Data.DataColumn columnCall_5;
            
            private System.Data.DataColumn columnRowNum;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListDataTable() {
                this.TableName = "PagedLeadsList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PagedLeadsListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PagedLeadsListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn First_Cre_DateColumn {
                get {
                    return this.columnFirst_Cre_Date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn First_NameColumn {
                get {
                    return this.columnFirst_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Last_NameColumn {
                get {
                    return this.columnLast_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Co_AppColumn {
                get {
                    return this.columnCo_App;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Work_PhoneColumn {
                get {
                    return this.columnWork_Phone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Home_PhoneColumn {
                get {
                    return this.columnHome_Phone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn House_TypeColumn {
                get {
                    return this.columnHouse_Type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Desired_LoanColumn {
                get {
                    return this.columnDesired_Loan;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreditColumn {
                get {
                    return this.columnCredit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Want_toColumn {
                get {
                    return this.columnWant_to;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_1Column {
                get {
                    return this.columnCall_1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_2Column {
                get {
                    return this.columnCall_2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_3Column {
                get {
                    return this.columnCall_3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_4Column {
                get {
                    return this.columnCall_4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Call_5Column {
                get {
                    return this.columnCall_5;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowNumColumn {
                get {
                    return this.columnRowNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListRow this[int index] {
                get {
                    return ((PagedLeadsListRow)(this.Rows[index]));
                }
            }
            
            public event PagedLeadsListRowChangeEventHandler PagedLeadsListRowChanging;
            
            public event PagedLeadsListRowChangeEventHandler PagedLeadsListRowChanged;
            
            public event PagedLeadsListRowChangeEventHandler PagedLeadsListRowDeleting;
            
            public event PagedLeadsListRowChangeEventHandler PagedLeadsListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPagedLeadsListRow(PagedLeadsListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListRow AddPagedLeadsListRow(
                        System.DateTime First_Cre_Date, 
                        string First_Name, 
                        string Last_Name, 
                        string Co_App, 
                        string City, 
                        string State, 
                        string Address, 
                        string Zip, 
                        string Work_Phone, 
                        string Home_Phone, 
                        string House_Type, 
                        decimal Desired_Loan, 
                        string Rate, 
                        string Credit, 
                        string Want_to, 
                        string Call_1, 
                        string Call_2, 
                        string Call_3, 
                        string Call_4, 
                        string Call_5, 
                        long RowNum) {
                PagedLeadsListRow rowPagedLeadsListRow = ((PagedLeadsListRow)(this.NewRow()));
                rowPagedLeadsListRow.ItemArray = new object[] {
                        First_Cre_Date,
                        First_Name,
                        Last_Name,
                        Co_App,
                        City,
                        State,
                        Address,
                        Zip,
                        Work_Phone,
                        Home_Phone,
                        House_Type,
                        Desired_Loan,
                        Rate,
                        Credit,
                        Want_to,
                        Call_1,
                        Call_2,
                        Call_3,
                        Call_4,
                        Call_5,
                        RowNum};
                this.Rows.Add(rowPagedLeadsListRow);
                return rowPagedLeadsListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PagedLeadsListDataTable cln = ((PagedLeadsListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PagedLeadsListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFirst_Cre_Date = base.Columns["First_Cre_Date"];
                this.columnFirst_Name = base.Columns["First Name"];
                this.columnLast_Name = base.Columns["Last Name"];
                this.columnCo_App = base.Columns["Co App"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnAddress = base.Columns["Address"];
                this.columnZip = base.Columns["Zip"];
                this.columnWork_Phone = base.Columns["Work Phone"];
                this.columnHome_Phone = base.Columns["Home Phone"];
                this.columnHouse_Type = base.Columns["House Type"];
                this.columnDesired_Loan = base.Columns["Desired Loan"];
                this.columnRate = base.Columns["Rate"];
                this.columnCredit = base.Columns["Credit"];
                this.columnWant_to = base.Columns["Want to"];
                this.columnCall_1 = base.Columns["Call 1"];
                this.columnCall_2 = base.Columns["Call 2"];
                this.columnCall_3 = base.Columns["Call 3"];
                this.columnCall_4 = base.Columns["Call 4"];
                this.columnCall_5 = base.Columns["Call 5"];
                this.columnRowNum = base.Columns["RowNum"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFirst_Cre_Date = new System.Data.DataColumn("First_Cre_Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirst_Cre_Date);
                this.columnFirst_Name = new System.Data.DataColumn("First Name", typeof(string), null, System.Data.MappingType.Element);
                this.columnFirst_Name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "First_Name");
                this.columnFirst_Name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "First_NameColumn");
                this.columnFirst_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFirst_Name");
                this.columnFirst_Name.ExtendedProperties.Add("Generator_UserColumnName", "First Name");
                base.Columns.Add(this.columnFirst_Name);
                this.columnLast_Name = new System.Data.DataColumn("Last Name", typeof(string), null, System.Data.MappingType.Element);
                this.columnLast_Name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Last_Name");
                this.columnLast_Name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Last_NameColumn");
                this.columnLast_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLast_Name");
                this.columnLast_Name.ExtendedProperties.Add("Generator_UserColumnName", "Last Name");
                base.Columns.Add(this.columnLast_Name);
                this.columnCo_App = new System.Data.DataColumn("Co App", typeof(string), null, System.Data.MappingType.Element);
                this.columnCo_App.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Co_App");
                this.columnCo_App.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Co_AppColumn");
                this.columnCo_App.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCo_App");
                this.columnCo_App.ExtendedProperties.Add("Generator_UserColumnName", "Co App");
                base.Columns.Add(this.columnCo_App);
                this.columnCity = new System.Data.DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new System.Data.DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnZip = new System.Data.DataColumn("Zip", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnWork_Phone = new System.Data.DataColumn("Work Phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnWork_Phone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Work_Phone");
                this.columnWork_Phone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Work_PhoneColumn");
                this.columnWork_Phone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnWork_Phone");
                this.columnWork_Phone.ExtendedProperties.Add("Generator_UserColumnName", "Work Phone");
                base.Columns.Add(this.columnWork_Phone);
                this.columnHome_Phone = new System.Data.DataColumn("Home Phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnHome_Phone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Home_Phone");
                this.columnHome_Phone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Home_PhoneColumn");
                this.columnHome_Phone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHome_Phone");
                this.columnHome_Phone.ExtendedProperties.Add("Generator_UserColumnName", "Home Phone");
                base.Columns.Add(this.columnHome_Phone);
                this.columnHouse_Type = new System.Data.DataColumn("House Type", typeof(string), null, System.Data.MappingType.Element);
                this.columnHouse_Type.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "House_Type");
                this.columnHouse_Type.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "House_TypeColumn");
                this.columnHouse_Type.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHouse_Type");
                this.columnHouse_Type.ExtendedProperties.Add("Generator_UserColumnName", "House Type");
                base.Columns.Add(this.columnHouse_Type);
                this.columnDesired_Loan = new System.Data.DataColumn("Desired Loan", typeof(decimal), null, System.Data.MappingType.Element);
                this.columnDesired_Loan.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Desired_Loan");
                this.columnDesired_Loan.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Desired_LoanColumn");
                this.columnDesired_Loan.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDesired_Loan");
                this.columnDesired_Loan.ExtendedProperties.Add("Generator_UserColumnName", "Desired Loan");
                base.Columns.Add(this.columnDesired_Loan);
                this.columnRate = new System.Data.DataColumn("Rate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnCredit = new System.Data.DataColumn("Credit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCredit);
                this.columnWant_to = new System.Data.DataColumn("Want to", typeof(string), null, System.Data.MappingType.Element);
                this.columnWant_to.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Want_to");
                this.columnWant_to.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Want_toColumn");
                this.columnWant_to.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnWant_to");
                this.columnWant_to.ExtendedProperties.Add("Generator_UserColumnName", "Want to");
                base.Columns.Add(this.columnWant_to);
                this.columnCall_1 = new System.Data.DataColumn("Call 1", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_1.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_1");
                this.columnCall_1.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_1Column");
                this.columnCall_1.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_1");
                this.columnCall_1.ExtendedProperties.Add("Generator_UserColumnName", "Call 1");
                base.Columns.Add(this.columnCall_1);
                this.columnCall_2 = new System.Data.DataColumn("Call 2", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_2.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_2");
                this.columnCall_2.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_2Column");
                this.columnCall_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_2");
                this.columnCall_2.ExtendedProperties.Add("Generator_UserColumnName", "Call 2");
                base.Columns.Add(this.columnCall_2);
                this.columnCall_3 = new System.Data.DataColumn("Call 3", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_3.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_3");
                this.columnCall_3.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_3Column");
                this.columnCall_3.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_3");
                this.columnCall_3.ExtendedProperties.Add("Generator_UserColumnName", "Call 3");
                base.Columns.Add(this.columnCall_3);
                this.columnCall_4 = new System.Data.DataColumn("Call 4", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_4.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_4");
                this.columnCall_4.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_4Column");
                this.columnCall_4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_4");
                this.columnCall_4.ExtendedProperties.Add("Generator_UserColumnName", "Call 4");
                base.Columns.Add(this.columnCall_4);
                this.columnCall_5 = new System.Data.DataColumn("Call 5", typeof(string), null, System.Data.MappingType.Element);
                this.columnCall_5.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Call_5");
                this.columnCall_5.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Call_5Column");
                this.columnCall_5.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCall_5");
                this.columnCall_5.ExtendedProperties.Add("Generator_UserColumnName", "Call 5");
                base.Columns.Add(this.columnCall_5);
                this.columnRowNum = new System.Data.DataColumn("RowNum", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNum);
                this.columnFirst_Name.ReadOnly = true;
                this.columnFirst_Name.MaxLength = 15;
                this.columnLast_Name.ReadOnly = true;
                this.columnLast_Name.MaxLength = 15;
                this.columnCo_App.ReadOnly = true;
                this.columnCo_App.MaxLength = 25;
                this.columnCity.ReadOnly = true;
                this.columnCity.MaxLength = 15;
                this.columnState.MaxLength = 255;
                this.columnAddress.ReadOnly = true;
                this.columnAddress.MaxLength = 25;
                this.columnZip.ReadOnly = true;
                this.columnZip.MaxLength = 5;
                this.columnWork_Phone.MaxLength = 255;
                this.columnHome_Phone.MaxLength = 255;
                this.columnHouse_Type.ReadOnly = true;
                this.columnHouse_Type.MaxLength = 13;
                this.columnDesired_Loan.ReadOnly = true;
                this.columnRate.ReadOnly = true;
                this.columnRate.MaxLength = 255;
                this.columnCredit.ReadOnly = true;
                this.columnCredit.MaxLength = 9;
                this.columnWant_to.ReadOnly = true;
                this.columnWant_to.MaxLength = 15;
                this.columnCall_1.ReadOnly = true;
                this.columnCall_1.MaxLength = 2;
                this.columnCall_2.ReadOnly = true;
                this.columnCall_2.MaxLength = 2;
                this.columnCall_3.ReadOnly = true;
                this.columnCall_3.MaxLength = 2;
                this.columnCall_4.ReadOnly = true;
                this.columnCall_4.MaxLength = 2;
                this.columnCall_5.ReadOnly = true;
                this.columnCall_5.MaxLength = 2;
                this.columnRowNum.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListRow NewPagedLeadsListRow() {
                return ((PagedLeadsListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PagedLeadsListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PagedLeadsListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PagedLeadsListRowChanged != null)) {
                    this.PagedLeadsListRowChanged(this, new PagedLeadsListRowChangeEvent(((PagedLeadsListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PagedLeadsListRowChanging != null)) {
                    this.PagedLeadsListRowChanging(this, new PagedLeadsListRowChangeEvent(((PagedLeadsListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PagedLeadsListRowDeleted != null)) {
                    this.PagedLeadsListRowDeleted(this, new PagedLeadsListRowChangeEvent(((PagedLeadsListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PagedLeadsListRowDeleting != null)) {
                    this.PagedLeadsListRowDeleting(this, new PagedLeadsListRowChangeEvent(((PagedLeadsListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePagedLeadsListRow(PagedLeadsListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PagedLeadsListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AreacodesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnArea_Code;
            
            private System.Data.DataColumn columnLead_Count;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreacodesDataTable() {
                this.TableName = "Areacodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AreacodesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AreacodesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Area_CodeColumn {
                get {
                    return this.columnArea_Code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lead_CountColumn {
                get {
                    return this.columnLead_Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreacodesRow this[int index] {
                get {
                    return ((AreacodesRow)(this.Rows[index]));
                }
            }
            
            public event AreacodesRowChangeEventHandler AreacodesRowChanging;
            
            public event AreacodesRowChangeEventHandler AreacodesRowChanged;
            
            public event AreacodesRowChangeEventHandler AreacodesRowDeleting;
            
            public event AreacodesRowChangeEventHandler AreacodesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAreacodesRow(AreacodesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreacodesRow AddAreacodesRow(string Area_Code, int Lead_Count) {
                AreacodesRow rowAreacodesRow = ((AreacodesRow)(this.NewRow()));
                rowAreacodesRow.ItemArray = new object[] {
                        Area_Code,
                        Lead_Count};
                this.Rows.Add(rowAreacodesRow);
                return rowAreacodesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AreacodesDataTable cln = ((AreacodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AreacodesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnArea_Code = base.Columns["Area Code"];
                this.columnLead_Count = base.Columns["Lead Count"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnArea_Code = new System.Data.DataColumn("Area Code", typeof(string), null, System.Data.MappingType.Element);
                this.columnArea_Code.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Area_Code");
                this.columnArea_Code.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Area_CodeColumn");
                this.columnArea_Code.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnArea_Code");
                this.columnArea_Code.ExtendedProperties.Add("Generator_UserColumnName", "Area Code");
                base.Columns.Add(this.columnArea_Code);
                this.columnLead_Count = new System.Data.DataColumn("Lead Count", typeof(int), null, System.Data.MappingType.Element);
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Lead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Lead_CountColumn");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_UserColumnName", "Lead Count");
                base.Columns.Add(this.columnLead_Count);
                this.columnArea_Code.ReadOnly = true;
                this.columnArea_Code.MaxLength = 3;
                this.columnLead_Count.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreacodesRow NewAreacodesRow() {
                return ((AreacodesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AreacodesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AreacodesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AreacodesRowChanged != null)) {
                    this.AreacodesRowChanged(this, new AreacodesRowChangeEvent(((AreacodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AreacodesRowChanging != null)) {
                    this.AreacodesRowChanging(this, new AreacodesRowChangeEvent(((AreacodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AreacodesRowDeleted != null)) {
                    this.AreacodesRowDeleted(this, new AreacodesRowChangeEvent(((AreacodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AreacodesRowDeleting != null)) {
                    this.AreacodesRowDeleting(this, new AreacodesRowChangeEvent(((AreacodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAreacodesRow(AreacodesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AreacodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CitysDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCity;
            
            private System.Data.DataColumn columnLead_Count;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CitysDataTable() {
                this.TableName = "Citys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CitysDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CitysDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lead_CountColumn {
                get {
                    return this.columnLead_Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CitysRow this[int index] {
                get {
                    return ((CitysRow)(this.Rows[index]));
                }
            }
            
            public event CitysRowChangeEventHandler CitysRowChanging;
            
            public event CitysRowChangeEventHandler CitysRowChanged;
            
            public event CitysRowChangeEventHandler CitysRowDeleting;
            
            public event CitysRowChangeEventHandler CitysRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCitysRow(CitysRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CitysRow AddCitysRow(string City, int Lead_Count) {
                CitysRow rowCitysRow = ((CitysRow)(this.NewRow()));
                rowCitysRow.ItemArray = new object[] {
                        City,
                        Lead_Count};
                this.Rows.Add(rowCitysRow);
                return rowCitysRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CitysDataTable cln = ((CitysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CitysDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCity = base.Columns["City"];
                this.columnLead_Count = base.Columns["Lead Count"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCity = new System.Data.DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnLead_Count = new System.Data.DataColumn("Lead Count", typeof(int), null, System.Data.MappingType.Element);
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Lead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Lead_CountColumn");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_UserColumnName", "Lead Count");
                base.Columns.Add(this.columnLead_Count);
                this.columnCity.MaxLength = 255;
                this.columnLead_Count.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CitysRow NewCitysRow() {
                return ((CitysRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CitysRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CitysRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CitysRowChanged != null)) {
                    this.CitysRowChanged(this, new CitysRowChangeEvent(((CitysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CitysRowChanging != null)) {
                    this.CitysRowChanging(this, new CitysRowChangeEvent(((CitysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CitysRowDeleted != null)) {
                    this.CitysRowDeleted(this, new CitysRowChangeEvent(((CitysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CitysRowDeleting != null)) {
                    this.CitysRowDeleting(this, new CitysRowChangeEvent(((CitysRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCitysRow(CitysRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CitysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZipsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnZip;
            
            private System.Data.DataColumn columnLead_Count;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipsDataTable() {
                this.TableName = "Zips";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZipsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ZipsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Lead_CountColumn {
                get {
                    return this.columnLead_Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipsRow this[int index] {
                get {
                    return ((ZipsRow)(this.Rows[index]));
                }
            }
            
            public event ZipsRowChangeEventHandler ZipsRowChanging;
            
            public event ZipsRowChangeEventHandler ZipsRowChanged;
            
            public event ZipsRowChangeEventHandler ZipsRowDeleting;
            
            public event ZipsRowChangeEventHandler ZipsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddZipsRow(ZipsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipsRow AddZipsRow(string Zip, int Lead_Count) {
                ZipsRow rowZipsRow = ((ZipsRow)(this.NewRow()));
                rowZipsRow.ItemArray = new object[] {
                        Zip,
                        Lead_Count};
                this.Rows.Add(rowZipsRow);
                return rowZipsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ZipsDataTable cln = ((ZipsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ZipsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnZip = base.Columns["Zip"];
                this.columnLead_Count = base.Columns["Lead Count"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnZip = new System.Data.DataColumn("Zip", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnLead_Count = new System.Data.DataColumn("Lead Count", typeof(int), null, System.Data.MappingType.Element);
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Lead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Lead_CountColumn");
                this.columnLead_Count.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLead_Count");
                this.columnLead_Count.ExtendedProperties.Add("Generator_UserColumnName", "Lead Count");
                base.Columns.Add(this.columnLead_Count);
                this.columnZip.ReadOnly = true;
                this.columnZip.MaxLength = 5;
                this.columnLead_Count.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipsRow NewZipsRow() {
                return ((ZipsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ZipsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ZipsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZipsRowChanged != null)) {
                    this.ZipsRowChanged(this, new ZipsRowChangeEvent(((ZipsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZipsRowChanging != null)) {
                    this.ZipsRowChanging(this, new ZipsRowChangeEvent(((ZipsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZipsRowDeleted != null)) {
                    this.ZipsRowDeleted(this, new ZipsRowChangeEvent(((ZipsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZipsRowDeleting != null)) {
                    this.ZipsRowDeleting(this, new ZipsRowChangeEvent(((ZipsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveZipsRow(ZipsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZipsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PagedLeadsListCountDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTotal;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListCountDataTable() {
                this.TableName = "PagedLeadsListCount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PagedLeadsListCountDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PagedLeadsListCountDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListCountRow this[int index] {
                get {
                    return ((PagedLeadsListCountRow)(this.Rows[index]));
                }
            }
            
            public event PagedLeadsListCountRowChangeEventHandler PagedLeadsListCountRowChanging;
            
            public event PagedLeadsListCountRowChangeEventHandler PagedLeadsListCountRowChanged;
            
            public event PagedLeadsListCountRowChangeEventHandler PagedLeadsListCountRowDeleting;
            
            public event PagedLeadsListCountRowChangeEventHandler PagedLeadsListCountRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPagedLeadsListCountRow(PagedLeadsListCountRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListCountRow AddPagedLeadsListCountRow(int Total) {
                PagedLeadsListCountRow rowPagedLeadsListCountRow = ((PagedLeadsListCountRow)(this.NewRow()));
                rowPagedLeadsListCountRow.ItemArray = new object[] {
                        Total};
                this.Rows.Add(rowPagedLeadsListCountRow);
                return rowPagedLeadsListCountRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PagedLeadsListCountDataTable cln = ((PagedLeadsListCountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PagedLeadsListCountDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTotal = base.Columns["Total"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTotal = new System.Data.DataColumn("Total", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnTotal.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListCountRow NewPagedLeadsListCountRow() {
                return ((PagedLeadsListCountRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PagedLeadsListCountRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PagedLeadsListCountRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PagedLeadsListCountRowChanged != null)) {
                    this.PagedLeadsListCountRowChanged(this, new PagedLeadsListCountRowChangeEvent(((PagedLeadsListCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PagedLeadsListCountRowChanging != null)) {
                    this.PagedLeadsListCountRowChanging(this, new PagedLeadsListCountRowChangeEvent(((PagedLeadsListCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PagedLeadsListCountRowDeleted != null)) {
                    this.PagedLeadsListCountRowDeleted(this, new PagedLeadsListCountRowChangeEvent(((PagedLeadsListCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PagedLeadsListCountRowDeleting != null)) {
                    this.PagedLeadsListCountRowDeleting(this, new PagedLeadsListCountRowChangeEvent(((PagedLeadsListCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePagedLeadsListCountRow(PagedLeadsListCountRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                telemarketSQLDataSetStates ds = new telemarketSQLDataSetStates();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PagedLeadsListCountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class statesRow : System.Data.DataRow {
            
            private statesDataTable tablestates;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal statesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestates = ((statesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string state_abr {
                get {
                    try {
                        return ((string)(this[this.tablestates.state_abrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'state_abr\' in table \'states\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestates.state_abrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string state_name {
                get {
                    try {
                        return ((string)(this[this.tablestates.state_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'state_name\' in table \'states\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestates.state_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstate_abrNull() {
                return this.IsNull(this.tablestates.state_abrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstate_abrNull() {
                this[this.tablestates.state_abrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstate_nameNull() {
                return this.IsNull(this.tablestates.state_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstate_nameNull() {
                this[this.tablestates.state_nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LeadCountRow : System.Data.DataRow {
            
            private LeadCountDataTable tableLeadCount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LeadCountRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLeadCount = ((LeadCountDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Total {
                get {
                    try {
                        return ((int)(this[this.tableLeadCount.TotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total\' in table \'LeadCount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeadCount.TotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lead_State {
                get {
                    try {
                        return ((string)(this[this.tableLeadCount.lead_StateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'lead_State\' in table \'LeadCount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeadCount.lead_StateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableLeadCount.TotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableLeadCount.TotalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islead_StateNull() {
                return this.IsNull(this.tableLeadCount.lead_StateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlead_StateNull() {
                this[this.tableLeadCount.lead_StateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblSelectRow : System.Data.DataRow {
            
            private tblSelectDataTable tabletblSelect;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblSelectRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblSelect = ((tblSelectDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int iSelect {
                get {
                    return ((int)(this[this.tabletblSelect.iSelectColumn]));
                }
                set {
                    this[this.tabletblSelect.iSelectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sSelect {
                get {
                    return ((string)(this[this.tabletblSelect.sSelectColumn]));
                }
                set {
                    this[this.tabletblSelect.sSelectColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LookingToTypesRow : System.Data.DataRow {
            
            private LookingToTypesDataTable tableLookingToTypes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLookingToTypes = ((LookingToTypesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filters {
                get {
                    try {
                        return ((string)(this[this.tableLookingToTypes.FiltersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Filters\' in table \'LookingToTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLookingToTypes.FiltersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lead_Count {
                get {
                    try {
                        return ((int)(this[this.tableLookingToTypes.Lead_CountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lead Count\' in table \'LookingToTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLookingToTypes.Lead_CountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFiltersNull() {
                return this.IsNull(this.tableLookingToTypes.FiltersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFiltersNull() {
                this[this.tableLookingToTypes.FiltersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLead_CountNull() {
                return this.IsNull(this.tableLookingToTypes.Lead_CountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLead_CountNull() {
                this[this.tableLookingToTypes.Lead_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LookingToTypesByDateRow : System.Data.DataRow {
            
            private LookingToTypesByDateDataTable tableLookingToTypesByDate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypesByDateRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLookingToTypesByDate = ((LookingToTypesByDateDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filters {
                get {
                    try {
                        return ((string)(this[this.tableLookingToTypesByDate.FiltersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Filters\' in table \'LookingToTypesByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLookingToTypesByDate.FiltersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lead_Count {
                get {
                    try {
                        return ((int)(this[this.tableLookingToTypesByDate.Lead_CountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lead Count\' in table \'LookingToTypesByDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLookingToTypesByDate.Lead_CountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFiltersNull() {
                return this.IsNull(this.tableLookingToTypesByDate.FiltersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFiltersNull() {
                this[this.tableLookingToTypesByDate.FiltersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLead_CountNull() {
                return this.IsNull(this.tableLookingToTypesByDate.Lead_CountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLead_CountNull() {
                this[this.tableLookingToTypesByDate.Lead_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LookingToTypesAllStatesRow : System.Data.DataRow {
            
            private LookingToTypesAllStatesDataTable tableLookingToTypesAllStates;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypesAllStatesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLookingToTypesAllStates = ((LookingToTypesAllStatesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filters {
                get {
                    try {
                        return ((string)(this[this.tableLookingToTypesAllStates.FiltersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Filters\' in table \'LookingToTypesAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLookingToTypesAllStates.FiltersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lead_Count {
                get {
                    try {
                        return ((int)(this[this.tableLookingToTypesAllStates.Lead_CountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lead Count\' in table \'LookingToTypesAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLookingToTypesAllStates.Lead_CountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFiltersNull() {
                return this.IsNull(this.tableLookingToTypesAllStates.FiltersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFiltersNull() {
                this[this.tableLookingToTypesAllStates.FiltersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLead_CountNull() {
                return this.IsNull(this.tableLookingToTypesAllStates.Lead_CountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLead_CountNull() {
                this[this.tableLookingToTypesAllStates.Lead_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LookingToTypesByDateAllStatesRow : System.Data.DataRow {
            
            private LookingToTypesByDateAllStatesDataTable tableLookingToTypesByDateAllStates;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypesByDateAllStatesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLookingToTypesByDateAllStates = ((LookingToTypesByDateAllStatesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filters {
                get {
                    try {
                        return ((string)(this[this.tableLookingToTypesByDateAllStates.FiltersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Filters\' in table \'LookingToTypesByDateAllStates\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableLookingToTypesByDateAllStates.FiltersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lead_Count {
                get {
                    try {
                        return ((int)(this[this.tableLookingToTypesByDateAllStates.Lead_CountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lead Count\' in table \'LookingToTypesByDateAllStates\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableLookingToTypesByDateAllStates.Lead_CountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFiltersNull() {
                return this.IsNull(this.tableLookingToTypesByDateAllStates.FiltersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFiltersNull() {
                this[this.tableLookingToTypesByDateAllStates.FiltersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLead_CountNull() {
                return this.IsNull(this.tableLookingToTypesByDateAllStates.Lead_CountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLead_CountNull() {
                this[this.tableLookingToTypesByDateAllStates.Lead_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PagedLeadsListAllStatesRow : System.Data.DataRow {
            
            private PagedLeadsListAllStatesDataTable tablePagedLeadsListAllStates;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PagedLeadsListAllStatesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePagedLeadsListAllStates = ((PagedLeadsListAllStatesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime First_Cre_Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePagedLeadsListAllStates.First_Cre_DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'First_Cre_Date\' in table \'PagedLeadsListAllStates\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.First_Cre_DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string First_Name {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.First_NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'First Name\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.First_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Last_Name {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Last_NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Name\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Last_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Co_App {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Co_AppColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Co App\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Co_AppColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.CityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'City\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.CityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.StateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'State\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.StateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Address\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.ZipColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Zip\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.ZipColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_Phone {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Work_PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Work Phone\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Work_PhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Home_Phone {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Home_PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Home Phone\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Home_PhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string House_Type {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.House_TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'House Type\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.House_TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Desired_Loan {
                get {
                    try {
                        return ((decimal)(this[this.tablePagedLeadsListAllStates.Desired_LoanColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Desired Loan\' in table \'PagedLeadsListAllStates\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Desired_LoanColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rate {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.RateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Rate\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.RateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Credit {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.CreditColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Credit\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.CreditColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Want_to {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Want_toColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Want to\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Want_toColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_1 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Call_1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 1\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Call_1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_2 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Call_2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 2\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Call_2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_3 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Call_3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 3\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Call_3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_4 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Call_4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 4\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Call_4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_5 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsListAllStates.Call_5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 5\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.Call_5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RowNum {
                get {
                    try {
                        return ((long)(this[this.tablePagedLeadsListAllStates.RowNumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowNum\' in table \'PagedLeadsListAllStates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListAllStates.RowNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirst_Cre_DateNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.First_Cre_DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirst_Cre_DateNull() {
                this[this.tablePagedLeadsListAllStates.First_Cre_DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirst_NameNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.First_NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirst_NameNull() {
                this[this.tablePagedLeadsListAllStates.First_NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_NameNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Last_NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_NameNull() {
                this[this.tablePagedLeadsListAllStates.Last_NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCo_AppNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Co_AppColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCo_AppNull() {
                this[this.tablePagedLeadsListAllStates.Co_AppColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.CityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tablePagedLeadsListAllStates.CityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.StateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tablePagedLeadsListAllStates.StateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.AddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tablePagedLeadsListAllStates.AddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.ZipColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tablePagedLeadsListAllStates.ZipColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_PhoneNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Work_PhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_PhoneNull() {
                this[this.tablePagedLeadsListAllStates.Work_PhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHome_PhoneNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Home_PhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHome_PhoneNull() {
                this[this.tablePagedLeadsListAllStates.Home_PhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHouse_TypeNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.House_TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHouse_TypeNull() {
                this[this.tablePagedLeadsListAllStates.House_TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesired_LoanNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Desired_LoanColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesired_LoanNull() {
                this[this.tablePagedLeadsListAllStates.Desired_LoanColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.RateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tablePagedLeadsListAllStates.RateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.CreditColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditNull() {
                this[this.tablePagedLeadsListAllStates.CreditColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWant_toNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Want_toColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWant_toNull() {
                this[this.tablePagedLeadsListAllStates.Want_toColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_1Null() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Call_1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_1Null() {
                this[this.tablePagedLeadsListAllStates.Call_1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_2Null() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Call_2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_2Null() {
                this[this.tablePagedLeadsListAllStates.Call_2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_3Null() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Call_3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_3Null() {
                this[this.tablePagedLeadsListAllStates.Call_3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_4Null() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Call_4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_4Null() {
                this[this.tablePagedLeadsListAllStates.Call_4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_5Null() {
                return this.IsNull(this.tablePagedLeadsListAllStates.Call_5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_5Null() {
                this[this.tablePagedLeadsListAllStates.Call_5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNumNull() {
                return this.IsNull(this.tablePagedLeadsListAllStates.RowNumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNumNull() {
                this[this.tablePagedLeadsListAllStates.RowNumColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LookingToTypes1Row : System.Data.DataRow {
            
            private LookingToTypes1DataTable tableLookingToTypes1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookingToTypes1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLookingToTypes1 = ((LookingToTypes1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filters {
                get {
                    try {
                        return ((string)(this[this.tableLookingToTypes1.FiltersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Filters\' in table \'LookingToTypes1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLookingToTypes1.FiltersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lead_Count {
                get {
                    try {
                        return ((int)(this[this.tableLookingToTypes1.Lead_CountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lead Count\' in table \'LookingToTypes1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLookingToTypes1.Lead_CountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFiltersNull() {
                return this.IsNull(this.tableLookingToTypes1.FiltersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFiltersNull() {
                this[this.tableLookingToTypes1.FiltersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLead_CountNull() {
                return this.IsNull(this.tableLookingToTypes1.Lead_CountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLead_CountNull() {
                this[this.tableLookingToTypes1.Lead_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PagedLeadsListRow : System.Data.DataRow {
            
            private PagedLeadsListDataTable tablePagedLeadsList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PagedLeadsListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePagedLeadsList = ((PagedLeadsListDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime First_Cre_Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePagedLeadsList.First_Cre_DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'First_Cre_Date\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.First_Cre_DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string First_Name {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.First_NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'First Name\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.First_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Last_Name {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Last_NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Last Name\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Last_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Co_App {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Co_AppColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Co App\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Co_AppColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.CityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'City\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.CityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.StateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'State\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.StateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Address\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.ZipColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Zip\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.ZipColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_Phone {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Work_PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Work Phone\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Work_PhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Home_Phone {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Home_PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Home Phone\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Home_PhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string House_Type {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.House_TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'House Type\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.House_TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Desired_Loan {
                get {
                    try {
                        return ((decimal)(this[this.tablePagedLeadsList.Desired_LoanColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Desired Loan\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Desired_LoanColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rate {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.RateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Rate\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.RateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Credit {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.CreditColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Credit\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.CreditColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Want_to {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Want_toColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Want to\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Want_toColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_1 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Call_1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 1\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Call_1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_2 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Call_2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 2\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Call_2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_3 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Call_3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 3\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Call_3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_4 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Call_4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 4\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Call_4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Call_5 {
                get {
                    try {
                        return ((string)(this[this.tablePagedLeadsList.Call_5Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Call 5\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.Call_5Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RowNum {
                get {
                    try {
                        return ((long)(this[this.tablePagedLeadsList.RowNumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowNum\' in table \'PagedLeadsList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsList.RowNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirst_Cre_DateNull() {
                return this.IsNull(this.tablePagedLeadsList.First_Cre_DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirst_Cre_DateNull() {
                this[this.tablePagedLeadsList.First_Cre_DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirst_NameNull() {
                return this.IsNull(this.tablePagedLeadsList.First_NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirst_NameNull() {
                this[this.tablePagedLeadsList.First_NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLast_NameNull() {
                return this.IsNull(this.tablePagedLeadsList.Last_NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLast_NameNull() {
                this[this.tablePagedLeadsList.Last_NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCo_AppNull() {
                return this.IsNull(this.tablePagedLeadsList.Co_AppColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCo_AppNull() {
                this[this.tablePagedLeadsList.Co_AppColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tablePagedLeadsList.CityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tablePagedLeadsList.CityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tablePagedLeadsList.StateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tablePagedLeadsList.StateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tablePagedLeadsList.AddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tablePagedLeadsList.AddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tablePagedLeadsList.ZipColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tablePagedLeadsList.ZipColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_PhoneNull() {
                return this.IsNull(this.tablePagedLeadsList.Work_PhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_PhoneNull() {
                this[this.tablePagedLeadsList.Work_PhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHome_PhoneNull() {
                return this.IsNull(this.tablePagedLeadsList.Home_PhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHome_PhoneNull() {
                this[this.tablePagedLeadsList.Home_PhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHouse_TypeNull() {
                return this.IsNull(this.tablePagedLeadsList.House_TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHouse_TypeNull() {
                this[this.tablePagedLeadsList.House_TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesired_LoanNull() {
                return this.IsNull(this.tablePagedLeadsList.Desired_LoanColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesired_LoanNull() {
                this[this.tablePagedLeadsList.Desired_LoanColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tablePagedLeadsList.RateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tablePagedLeadsList.RateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditNull() {
                return this.IsNull(this.tablePagedLeadsList.CreditColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditNull() {
                this[this.tablePagedLeadsList.CreditColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWant_toNull() {
                return this.IsNull(this.tablePagedLeadsList.Want_toColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWant_toNull() {
                this[this.tablePagedLeadsList.Want_toColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_1Null() {
                return this.IsNull(this.tablePagedLeadsList.Call_1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_1Null() {
                this[this.tablePagedLeadsList.Call_1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_2Null() {
                return this.IsNull(this.tablePagedLeadsList.Call_2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_2Null() {
                this[this.tablePagedLeadsList.Call_2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_3Null() {
                return this.IsNull(this.tablePagedLeadsList.Call_3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_3Null() {
                this[this.tablePagedLeadsList.Call_3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_4Null() {
                return this.IsNull(this.tablePagedLeadsList.Call_4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_4Null() {
                this[this.tablePagedLeadsList.Call_4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCall_5Null() {
                return this.IsNull(this.tablePagedLeadsList.Call_5Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCall_5Null() {
                this[this.tablePagedLeadsList.Call_5Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNumNull() {
                return this.IsNull(this.tablePagedLeadsList.RowNumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNumNull() {
                this[this.tablePagedLeadsList.RowNumColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AreacodesRow : System.Data.DataRow {
            
            private AreacodesDataTable tableAreacodes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AreacodesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAreacodes = ((AreacodesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Area_Code {
                get {
                    try {
                        return ((string)(this[this.tableAreacodes.Area_CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Area Code\' in table \'Areacodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAreacodes.Area_CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lead_Count {
                get {
                    try {
                        return ((int)(this[this.tableAreacodes.Lead_CountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lead Count\' in table \'Areacodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAreacodes.Lead_CountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArea_CodeNull() {
                return this.IsNull(this.tableAreacodes.Area_CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArea_CodeNull() {
                this[this.tableAreacodes.Area_CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLead_CountNull() {
                return this.IsNull(this.tableAreacodes.Lead_CountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLead_CountNull() {
                this[this.tableAreacodes.Lead_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CitysRow : System.Data.DataRow {
            
            private CitysDataTable tableCitys;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CitysRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCitys = ((CitysDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCitys.CityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'City\' in table \'Citys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCitys.CityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lead_Count {
                get {
                    try {
                        return ((int)(this[this.tableCitys.Lead_CountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lead Count\' in table \'Citys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCitys.Lead_CountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableCitys.CityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableCitys.CityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLead_CountNull() {
                return this.IsNull(this.tableCitys.Lead_CountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLead_CountNull() {
                this[this.tableCitys.Lead_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ZipsRow : System.Data.DataRow {
            
            private ZipsDataTable tableZips;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZipsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZips = ((ZipsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableZips.ZipColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Zip\' in table \'Zips\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZips.ZipColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lead_Count {
                get {
                    try {
                        return ((int)(this[this.tableZips.Lead_CountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lead Count\' in table \'Zips\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZips.Lead_CountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableZips.ZipColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableZips.ZipColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLead_CountNull() {
                return this.IsNull(this.tableZips.Lead_CountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLead_CountNull() {
                this[this.tableZips.Lead_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PagedLeadsListCountRow : System.Data.DataRow {
            
            private PagedLeadsListCountDataTable tablePagedLeadsListCount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PagedLeadsListCountRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePagedLeadsListCount = ((PagedLeadsListCountDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Total {
                get {
                    try {
                        return ((int)(this[this.tablePagedLeadsListCount.TotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total\' in table \'PagedLeadsListCount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagedLeadsListCount.TotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tablePagedLeadsListCount.TotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tablePagedLeadsListCount.TotalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class statesRowChangeEvent : System.EventArgs {
            
            private statesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statesRowChangeEvent(statesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public statesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LeadCountRowChangeEvent : System.EventArgs {
            
            private LeadCountRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeadCountRowChangeEvent(LeadCountRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeadCountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblSelectRowChangeEvent : System.EventArgs {
            
            private tblSelectRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSelectRowChangeEvent(tblSelectRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblSelectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LookingToTypesRowChangeEvent : System.EventArgs {
            
            private LookingToTypesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesRowChangeEvent(LookingToTypesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LookingToTypesByDateRowChangeEvent : System.EventArgs {
            
            private LookingToTypesByDateRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateRowChangeEvent(LookingToTypesByDateRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LookingToTypesAllStatesRowChangeEvent : System.EventArgs {
            
            private LookingToTypesAllStatesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesAllStatesRowChangeEvent(LookingToTypesAllStatesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesAllStatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LookingToTypesByDateAllStatesRowChangeEvent : System.EventArgs {
            
            private LookingToTypesByDateAllStatesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateAllStatesRowChangeEvent(LookingToTypesByDateAllStatesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypesByDateAllStatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PagedLeadsListAllStatesRowChangeEvent : System.EventArgs {
            
            private PagedLeadsListAllStatesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListAllStatesRowChangeEvent(PagedLeadsListAllStatesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListAllStatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LookingToTypes1RowChangeEvent : System.EventArgs {
            
            private LookingToTypes1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypes1RowChangeEvent(LookingToTypes1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookingToTypes1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PagedLeadsListRowChangeEvent : System.EventArgs {
            
            private PagedLeadsListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListRowChangeEvent(PagedLeadsListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AreacodesRowChangeEvent : System.EventArgs {
            
            private AreacodesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreacodesRowChangeEvent(AreacodesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreacodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CitysRowChangeEvent : System.EventArgs {
            
            private CitysRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CitysRowChangeEvent(CitysRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CitysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ZipsRowChangeEvent : System.EventArgs {
            
            private ZipsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipsRowChangeEvent(ZipsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PagedLeadsListCountRowChangeEvent : System.EventArgs {
            
            private PagedLeadsListCountRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListCountRowChangeEvent(PagedLeadsListCountRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PagedLeadsListCountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace MegaBookPrinter.telemarketSQLDataSetStatesTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class statesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public statesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "states";
            tableMapping.ColumnMappings.Add("state_abr", "state_abr");
            tableMapping.ColumnMappings.Add("state_name", "state_name");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     state_abr, state_name\r\nFROM         states\r\nWHERE     (NOT (state_abr " +
                "= N\'\"\"\'))\r\nORDER BY state_abr";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.statesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.statesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            telemarketSQLDataSetStates.statesDataTable dataTable = new telemarketSQLDataSetStates.statesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LeadCountTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LeadCountTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LeadCount";
            tableMapping.ColumnMappings.Add("Total", "Total");
            tableMapping.ColumnMappings.Add("lead_State", "lead_State");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     COUNT(lead_Id) AS Total, lead_State\r\nFROM         telemarketLeads\r\nGRO" +
                "UP BY lead_State\r\nHAVING      (lead_State = @state)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "lead_State", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.LeadCountDataTable dataTable, string state) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(state));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.LeadCountDataTable GetData(string state) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(state));
            }
            telemarketSQLDataSetStates.LeadCountDataTable dataTable = new telemarketSQLDataSetStates.LeadCountDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblSelectTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblSelectTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblSelect";
            tableMapping.ColumnMappings.Add("iSelect", "iSelect");
            tableMapping.ColumnMappings.Add("sSelect", "sSelect");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblSelect] ([iSelect], [sSelect]) VALUES (@iSelect, @sSelect)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@iSelect", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "iSelect", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sSelect", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sSelect", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT iSelect, sSelect FROM dbo.tblSelect";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.tblSelectDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.tblSelectDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            telemarketSQLDataSetStates.tblSelectDataTable dataTable = new telemarketSQLDataSetStates.tblSelectDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(telemarketSQLDataSetStates.tblSelectDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(telemarketSQLDataSetStates dataSet) {
            return this.Adapter.Update(dataSet, "tblSelect");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int iSelect, string sSelect) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(iSelect));
            if ((sSelect == null)) {
                throw new System.ArgumentNullException("sSelect");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(sSelect));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LookingToTypesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LookingToTypesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LookingToTypes";
            tableMapping.ColumnMappings.Add("Filters", "Filters");
            tableMapping.ColumnMappings.Add("Lead Count", "Lead Count");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.LookingToTypes";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@zip", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ltv", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.LookingToTypesCity";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NChar, 2, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NChar, 3, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.LookingToTypesDataTable dataTable, string state, string areacode, string city, string zip, string from, string to, string ltv) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(city));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(zip));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(to));
            }
            if ((ltv == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(ltv));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.LookingToTypesDataTable GetData(string state, string areacode, string city, string zip, string from, string to, string ltv) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(city));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(zip));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(to));
            }
            if ((ltv == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(ltv));
            }
            telemarketSQLDataSetStates.LookingToTypesDataTable dataTable = new telemarketSQLDataSetStates.LookingToTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillCity(telemarketSQLDataSetStates.LookingToTypesDataTable dataTable, string state, string areacode, string city) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(city));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual telemarketSQLDataSetStates.LookingToTypesDataTable GetDataCity(string state, string areacode, string city) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(city));
            }
            telemarketSQLDataSetStates.LookingToTypesDataTable dataTable = new telemarketSQLDataSetStates.LookingToTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LookingToTypesByDateTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LookingToTypesByDateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LookingToTypesByDate";
            tableMapping.ColumnMappings.Add("Filters", "Filters");
            tableMapping.ColumnMappings.Add("Lead Count", "Lead Count");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.LookingToTypesByDate";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NChar, 2, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NChar, 3, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.LookingToTypesByDateDataTable dataTable, string state, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string areacode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((from.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(from.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((to.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(to.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(areacode));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.LookingToTypesByDateDataTable GetData(string state, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string areacode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((from.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(from.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((to.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(to.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(areacode));
            }
            telemarketSQLDataSetStates.LookingToTypesByDateDataTable dataTable = new telemarketSQLDataSetStates.LookingToTypesByDateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LookingToTypesAllStatesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LookingToTypesAllStatesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LookingToTypesAllStates";
            tableMapping.ColumnMappings.Add("Filters", "Filters");
            tableMapping.ColumnMappings.Add("Lead Count", "Lead Count");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.LookingToTypesAllStates";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NChar, 3, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.LookingToTypesAllStatesCity";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NChar, 3, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.LookingToTypesAllStatesDataTable dataTable, string areacode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(areacode));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.LookingToTypesAllStatesDataTable GetData(string areacode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(areacode));
            }
            telemarketSQLDataSetStates.LookingToTypesAllStatesDataTable dataTable = new telemarketSQLDataSetStates.LookingToTypesAllStatesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillCity(telemarketSQLDataSetStates.LookingToTypesAllStatesDataTable dataTable, string areacode, string city) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(city));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual telemarketSQLDataSetStates.LookingToTypesAllStatesDataTable GetDataCity(string areacode, string city) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(city));
            }
            telemarketSQLDataSetStates.LookingToTypesAllStatesDataTable dataTable = new telemarketSQLDataSetStates.LookingToTypesAllStatesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LookingToTypesByDateAllStatesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LookingToTypesByDateAllStatesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LookingToTypesByDateAllStates";
            tableMapping.ColumnMappings.Add("Filters", "Filters");
            tableMapping.ColumnMappings.Add("Lead Count", "Lead Count");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.LookingToTypesByDateAllStates";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NChar, 3, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.LookingToTypesByDateAllStatesDataTable dataTable, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string areacode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((from.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(from.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((to.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(to.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(areacode));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.LookingToTypesByDateAllStatesDataTable GetData(System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string areacode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((from.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(from.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((to.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(to.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(areacode));
            }
            telemarketSQLDataSetStates.LookingToTypesByDateAllStatesDataTable dataTable = new telemarketSQLDataSetStates.LookingToTypesByDateAllStatesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PagedLeadsListAllStatesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PagedLeadsListAllStatesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PagedLeadsListAllStates";
            tableMapping.ColumnMappings.Add("First_Cre_Date", "First_Cre_Date");
            tableMapping.ColumnMappings.Add("First Name", "First Name");
            tableMapping.ColumnMappings.Add("Last Name", "Last Name");
            tableMapping.ColumnMappings.Add("Co App", "Co App");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Work Phone", "Work Phone");
            tableMapping.ColumnMappings.Add("Home Phone", "Home Phone");
            tableMapping.ColumnMappings.Add("House Type", "House Type");
            tableMapping.ColumnMappings.Add("Desired Loan", "Desired Loan");
            tableMapping.ColumnMappings.Add("Rate", "Rate");
            tableMapping.ColumnMappings.Add("Credit", "Credit");
            tableMapping.ColumnMappings.Add("Want to", "Want to");
            tableMapping.ColumnMappings.Add("Call 1", "Call 1");
            tableMapping.ColumnMappings.Add("Call 2", "Call 2");
            tableMapping.ColumnMappings.Add("Call 3", "Call 3");
            tableMapping.ColumnMappings.Add("Call 4", "Call 4");
            tableMapping.ColumnMappings.Add("Call 5", "Call 5");
            tableMapping.ColumnMappings.Add("RowNum", "RowNum");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PagedLeadsListAllStates";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lookingto", System.Data.SqlDbType.NChar, 20, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@startRowIndex", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@maximumRows", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@likeit", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NChar, 3, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.PagedLeadsListAllStatesDataTable dataTable, string lookingto, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, System.Nullable<int> startRowIndex, System.Nullable<int> maximumRows, System.Nullable<int> likeit, string areacode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((lookingto == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(lookingto));
            }
            if ((from.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(from.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((to.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(to.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((startRowIndex.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(startRowIndex.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((maximumRows.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((int)(maximumRows.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((likeit.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((int)(likeit.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(areacode));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.PagedLeadsListAllStatesDataTable GetData(string lookingto, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, System.Nullable<int> startRowIndex, System.Nullable<int> maximumRows, System.Nullable<int> likeit, string areacode) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((lookingto == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(lookingto));
            }
            if ((from.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(from.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((to.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(to.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((startRowIndex.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(startRowIndex.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((maximumRows.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((int)(maximumRows.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((likeit.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((int)(likeit.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(areacode));
            }
            telemarketSQLDataSetStates.PagedLeadsListAllStatesDataTable dataTable = new telemarketSQLDataSetStates.PagedLeadsListAllStatesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LookingToTypes1TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LookingToTypes1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LookingToTypes1";
            tableMapping.ColumnMappings.Add("Filters", "Filters");
            tableMapping.ColumnMappings.Add("Lead Count", "Lead Count");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.LookingToTypes";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@zip", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ltv", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.LookingToTypes1DataTable dataTable, string state, string areacode, string city, string zip, string from, string to, string ltv) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(city));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(zip));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(to));
            }
            if ((ltv == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(ltv));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.LookingToTypes1DataTable GetData(string state, string areacode, string city, string zip, string from, string to, string ltv) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(city));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(zip));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(to));
            }
            if ((ltv == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(ltv));
            }
            telemarketSQLDataSetStates.LookingToTypes1DataTable dataTable = new telemarketSQLDataSetStates.LookingToTypes1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PagedLeadsListTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PagedLeadsListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PagedLeadsList";
            tableMapping.ColumnMappings.Add("First_Cre_Date", "First_Cre_Date");
            tableMapping.ColumnMappings.Add("First Name", "First Name");
            tableMapping.ColumnMappings.Add("Last Name", "Last Name");
            tableMapping.ColumnMappings.Add("Co App", "Co App");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Work Phone", "Work Phone");
            tableMapping.ColumnMappings.Add("Home Phone", "Home Phone");
            tableMapping.ColumnMappings.Add("House Type", "House Type");
            tableMapping.ColumnMappings.Add("Desired Loan", "Desired Loan");
            tableMapping.ColumnMappings.Add("Rate", "Rate");
            tableMapping.ColumnMappings.Add("Credit", "Credit");
            tableMapping.ColumnMappings.Add("Want to", "Want to");
            tableMapping.ColumnMappings.Add("Call 1", "Call 1");
            tableMapping.ColumnMappings.Add("Call 2", "Call 2");
            tableMapping.ColumnMappings.Add("Call 3", "Call 3");
            tableMapping.ColumnMappings.Add("Call 4", "Call 4");
            tableMapping.ColumnMappings.Add("Call 5", "Call 5");
            tableMapping.ColumnMappings.Add("RowNum", "RowNum");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PagedLeadsList";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lookingto", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@startRowIndex", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@maximumRows", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@likeit", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@zip", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ltv", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.PagedLeadsListDataTable dataTable, string state, string lookingto, string from, string to, System.Nullable<long> startRowIndex, System.Nullable<long> maximumRows, System.Nullable<int> likeit, string areacode, string zip, string city, string ltv) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((lookingto == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(lookingto));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(to));
            }
            if ((startRowIndex.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((int)(startRowIndex.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((maximumRows.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((int)(maximumRows.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((likeit.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((int)(likeit.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(areacode));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = ((string)(zip));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = ((string)(city));
            }
            if ((ltv == null)) {
                this.Adapter.SelectCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[11].Value = ((string)(ltv));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.PagedLeadsListDataTable GetData(string state, string lookingto, string from, string to, System.Nullable<int> startRowIndex, System.Nullable<int> maximumRows, System.Nullable<int> likeit, string areacode, string zip, string city, string ltv) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((lookingto == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(lookingto));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(to));
            }
            if ((startRowIndex.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((int)(startRowIndex.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((maximumRows.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((int)(maximumRows.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((likeit.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((int)(likeit.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(areacode));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = ((string)(zip));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = ((string)(city));
            }
            if ((ltv == null)) {
                this.Adapter.SelectCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[11].Value = ((string)(ltv));
            }
            telemarketSQLDataSetStates.PagedLeadsListDataTable dataTable = new telemarketSQLDataSetStates.PagedLeadsListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AreacodesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AreacodesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Areacodes";
            tableMapping.ColumnMappings.Add("Area Code", "Area Code");
            tableMapping.ColumnMappings.Add("Lead Count", "Lead Count");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.Areacodes";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@zip", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.AreacodesDataTable dataTable, string state, string city, string zip, string from, string to) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(city));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(zip));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(to));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.AreacodesDataTable GetData(string state, string city, string zip, string from, string to) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(city));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(zip));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(to));
            }
            telemarketSQLDataSetStates.AreacodesDataTable dataTable = new telemarketSQLDataSetStates.AreacodesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CitysTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CitysTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Citys";
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("Lead Count", "Lead Count");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.Citys";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@zip", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.CitysDataTable dataTable, string state, string areacode, string zip, string from, string to) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(zip));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(to));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.CitysDataTable GetData(string state, string areacode, string zip, string from, string to) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(zip));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(to));
            }
            telemarketSQLDataSetStates.CitysDataTable dataTable = new telemarketSQLDataSetStates.CitysDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZipsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ZipsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Zips";
            tableMapping.ColumnMappings.Add("Zip", "Zip");
            tableMapping.ColumnMappings.Add("Lead Count", "Lead Count");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.Zips";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.NChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.ZipsDataTable dataTable, string state, string areacode, string city, string from, string to) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(city));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(to));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.ZipsDataTable GetData(string state, string areacode, string city, string from, string to) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(areacode));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(city));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(to));
            }
            telemarketSQLDataSetStates.ZipsDataTable dataTable = new telemarketSQLDataSetStates.ZipsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PagedLeadsListCountTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PagedLeadsListCountTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PagedLeadsListCount";
            tableMapping.ColumnMappings.Add("Total", "Total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MegaBookPrinter.Properties.Settings.Default.telemarketSQLConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PagedLeadsListCount";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lookingto", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@from", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@to", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@likeit", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@zip", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ltv", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(telemarketSQLDataSetStates.PagedLeadsListCountDataTable dataTable, string state, string lookingto, string from, string to, System.Nullable<int> likeit, string areacode, string zip, string city, string ltv) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((lookingto == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(lookingto));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(to));
            }
            if ((likeit.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((int)(likeit.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(areacode));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(zip));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(city));
            }
            if ((ltv == null)) {
                this.Adapter.SelectCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = ((string)(ltv));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual telemarketSQLDataSetStates.PagedLeadsListCountDataTable GetData(string state, string lookingto, string from, string to, System.Nullable<int> likeit, string areacode, string zip, string city, string ltv) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((state == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(state));
            }
            if ((lookingto == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(lookingto));
            }
            if ((from == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(from));
            }
            if ((to == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(to));
            }
            if ((likeit.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((int)(likeit.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((areacode == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(areacode));
            }
            if ((zip == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(zip));
            }
            if ((city == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(city));
            }
            if ((ltv == null)) {
                this.Adapter.SelectCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = ((string)(ltv));
            }
            telemarketSQLDataSetStates.PagedLeadsListCountDataTable dataTable = new telemarketSQLDataSetStates.PagedLeadsListCountDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591